namespace NovelerCompiler
{
    public enum GrammarKind
    {
        NotAValidGrammar,
        Token,
        NewLine,
        Character,
        BooleanLiteral,
        StatementEliminator,
        UnaryExpression,
        PreIncrementExpression,
        PreDecrementExpression,
        CastExpression,
        ReturnType,
        MultiplicativeExpression,
        AdditiveExpression,
        AssignmentOperator,
        BooleanExpression,
        Assignment,
        Expression,
        ConstantExpression,
        IfStatement,
        ExpressionStatement,
        InvocationExpression,
        Argument,
        ArgumentName,
        Identifier,
        ArgumentValue,
        ShiftExpression,
        RelationalExpression,
        EqualityExpression,
        AndExpression,
        ExclusiveOrExpression,
        InclusiveOrExpression,
        ConditionalAndExpression,
        ConditionalOrExpression,
        Block,
        StatementList,
        EmbeddedStatement,
        JumpStatement,
        ReturnStatement,
        Statement,
        SelectionStatement,
        LocalVariableInitializer,
        ArgumentList,
        DeclarationStatement,
        LocalVariableDeclarator,
        IntegerType,
        FloatingPointType,
        TypeSize,
        Signed,
        NumericType,
        SimpleValueType,
        NamespaceName,
        NamespaceOrTypeName,
        TypeName,
        ValueType,
        Type,
        PostIncrementExpression,
        PostDecrementExpression,
        IntegerLiteral,
        FloatLiteral,
        Literal,
        ParenthesizedExpression,
        PrimaryExpression,
        StatementExpression,
        PrimaryNoArrayCreation,
        EmptyExpression,
        FunctionReturnValueDeclaration,
        FunctionNoReturnValueDeclaration,
        FunctionDeclaration,
        Keywords,
        EmbeddedVariableInStory,
        Story,
        Import,
        StoryAtom,
        EscapedCharacters,
        StoryPart,
        EmbeddedValueInStory,
        StoryEmbeddedExpressionStatement,
        StoryEmbeddedIfStatement,
        StoryDeclarationStatement,
        StoryEmbeddedChoiceStatement,
        StoryEmbeddedVariableDeclaration,
        StoryChoice,
        StoryChoiceExpression,
        StoryExpressionStatement,
        StoryEmbeddedStatement,
        StringLiteral,
        EmptyStatement,
        StoryEmbeddedCode,
        EmptyStoryStatement,
        NonAssignmentExpression,
        StorySentence,
        StoryLineTerminator,
        StorySentenceLegalToken,
    }
}
