//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Github Repos\GameLab-RnD\Compiler\StoryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class StoryGrammar : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BEGIN_STATEMENT=1, ASTERISK=2, SLASH=3, Story_String_Start=4, Default_WS=5, 
		Default_Comment=6, PIPE=7, Continue_String=8, Story_Line=9, End_Story_String=10, 
		Embedded_Type_Declarer=11, Embedded_Assign=12, Embedded_Add=13, Embedded_Subtract=14, 
		Embedded_Multiply=15, Embedded_Divide=16, Embedded_Remainder=17, Embedded_Bitwise_Not=18, 
		Embedded_Bitwise_Or=19, Embedded_Bitwise_Xor=20, Embedded_Bitwise_And=21, 
		Embedded_Left_Shift=22, Embedded_Right_Shift=23, Embedded_Assign_Add=24, 
		Embedded_Assign_Subtract=25, Embedded_Assign_Multiply=26, Embedded_Assign_Divide=27, 
		Embedded_Assign_Remainder=28, Embedded_Assign_Bitwise_Or=29, Embedded_Assign_Bitwise_Xor=30, 
		Embedded_Assign_Bitwise_And=31, Embedded_Assign_Left_Shift=32, Embedded_Assign_Right_Shift=33, 
		Embedded_Conditional_And=34, Embedded_Conditional_Or=35, Embedded_Conditional_Not=36, 
		Embedded_Equals_To=37, Embedded_Not_Equals_To=38, Embedded_Less_Than=39, 
		Embedded_Greater_than=40, Embedded_Less_Than_or_Equal_To=41, Embedded_Greater_Than_Or_Equal_To=42, 
		Embedded_Increment=43, Embedded_Decrement=44, Embedded_Boolean=45, Embedded_Unsigned=46, 
		Embedded_Tiny=47, Embedded_Small=48, Embedded_Big=49, Embedded_Whole=50, 
		Embedded_Number=51, IMPORT=52, CODE=53, ENTER_BLOCK=54, Embedded_WS=55, 
		Embedded_Comment=56, Start_Embedded_Code_Block=57, Embedded_Identifier=58, 
		Embedded_Open_String_Literal=59, Exit_Statement=60, String_Literal_Character=61, 
		Close_String_Literal=62, Code_Type_Declarer=63, Code_Statement_Terminator_Character=64, 
		Code_Add=65, Code_Subtract=66, Code_Multiply=67, Code_Divide=68, Code_Remainder=69, 
		Code_Bitwise_Not=70, Code_Bitwise_Or=71, Code_Bitwise_Xor=72, Code_Bitwise_And=73, 
		Code_Left_Shift=74, Code_Right_Shift=75, Code_Assign_Add=76, Code_Assign_Subtract=77, 
		Code_Assign_Multiply=78, Code_Assign_Divide=79, Code_Assign_Remainder=80, 
		Code_Assign_Bitwise_Or=81, Code_Assign_Bitwise_Xor=82, Code_Assign_Bitwise_And=83, 
		Code_Assign_Left_Shift=84, Code_Assign_Right_Shift=85, Code_Conditional_And=86, 
		Code_Conditional_Or=87, Code_Conditional_Not=88, Code_Equals_To=89, Code_Not_Equals_To=90, 
		Code_Less_Than=91, Code_Greater_than=92, Code_Less_Than_or_Equal_To=93, 
		Code_Greater_Than_Or_Equal_To=94, Code_Increment=95, Code_Decrement=96, 
		Code_Boolean=97, Code_Unsigned=98, Code_Tiny=99, Code_Small=100, Code_Big=101, 
		Code_Whole=102, Code_Number=103, EXIT_CODE_BLOCK=104, Code_WS=105, Code_New_Line=106, 
		Code_Identifier=107, Code_Open_String_Literal=108;
	public const int
		RULE_story = 0, RULE_story_part = 1, RULE_text = 2, RULE_embedded_variable_declaration = 3, 
		RULE_embedded_statement = 4, RULE_import_statement = 5, RULE_story_line_termination = 6, 
		RULE_string_literal = 7, RULE_string_literal_content = 8, RULE_identifier = 9, 
		RULE_end_of_file = 10;
	public static readonly string[] ruleNames = {
		"story", "story_part", "text", "embedded_variable_declaration", "embedded_statement", 
		"import_statement", "story_line_termination", "string_literal", "string_literal_content", 
		"identifier", "end_of_file"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'*'", "'/'", null, null, null, "'|'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'import'", "'code'", "'{'", null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BEGIN_STATEMENT", "ASTERISK", "SLASH", "Story_String_Start", "Default_WS", 
		"Default_Comment", "PIPE", "Continue_String", "Story_Line", "End_Story_String", 
		"Embedded_Type_Declarer", "Embedded_Assign", "Embedded_Add", "Embedded_Subtract", 
		"Embedded_Multiply", "Embedded_Divide", "Embedded_Remainder", "Embedded_Bitwise_Not", 
		"Embedded_Bitwise_Or", "Embedded_Bitwise_Xor", "Embedded_Bitwise_And", 
		"Embedded_Left_Shift", "Embedded_Right_Shift", "Embedded_Assign_Add", 
		"Embedded_Assign_Subtract", "Embedded_Assign_Multiply", "Embedded_Assign_Divide", 
		"Embedded_Assign_Remainder", "Embedded_Assign_Bitwise_Or", "Embedded_Assign_Bitwise_Xor", 
		"Embedded_Assign_Bitwise_And", "Embedded_Assign_Left_Shift", "Embedded_Assign_Right_Shift", 
		"Embedded_Conditional_And", "Embedded_Conditional_Or", "Embedded_Conditional_Not", 
		"Embedded_Equals_To", "Embedded_Not_Equals_To", "Embedded_Less_Than", 
		"Embedded_Greater_than", "Embedded_Less_Than_or_Equal_To", "Embedded_Greater_Than_Or_Equal_To", 
		"Embedded_Increment", "Embedded_Decrement", "Embedded_Boolean", "Embedded_Unsigned", 
		"Embedded_Tiny", "Embedded_Small", "Embedded_Big", "Embedded_Whole", "Embedded_Number", 
		"IMPORT", "CODE", "ENTER_BLOCK", "Embedded_WS", "Embedded_Comment", "Start_Embedded_Code_Block", 
		"Embedded_Identifier", "Embedded_Open_String_Literal", "Exit_Statement", 
		"String_Literal_Character", "Close_String_Literal", "Code_Type_Declarer", 
		"Code_Statement_Terminator_Character", "Code_Add", "Code_Subtract", "Code_Multiply", 
		"Code_Divide", "Code_Remainder", "Code_Bitwise_Not", "Code_Bitwise_Or", 
		"Code_Bitwise_Xor", "Code_Bitwise_And", "Code_Left_Shift", "Code_Right_Shift", 
		"Code_Assign_Add", "Code_Assign_Subtract", "Code_Assign_Multiply", "Code_Assign_Divide", 
		"Code_Assign_Remainder", "Code_Assign_Bitwise_Or", "Code_Assign_Bitwise_Xor", 
		"Code_Assign_Bitwise_And", "Code_Assign_Left_Shift", "Code_Assign_Right_Shift", 
		"Code_Conditional_And", "Code_Conditional_Or", "Code_Conditional_Not", 
		"Code_Equals_To", "Code_Not_Equals_To", "Code_Less_Than", "Code_Greater_than", 
		"Code_Less_Than_or_Equal_To", "Code_Greater_Than_Or_Equal_To", "Code_Increment", 
		"Code_Decrement", "Code_Boolean", "Code_Unsigned", "Code_Tiny", "Code_Small", 
		"Code_Big", "Code_Whole", "Code_Number", "EXIT_CODE_BLOCK", "Code_WS", 
		"Code_New_Line", "Code_Identifier", "Code_Open_String_Literal"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StoryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StoryGrammar() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StoryGrammar(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StoryGrammar(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_statementContext[] import_statement() {
			return GetRuleContexts<Import_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_statementContext import_statement(int i) {
			return GetRuleContext<Import_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Story_partContext[] story_part() {
			return GetRuleContexts<Story_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Story_partContext story_part(int i) {
			return GetRuleContext<Story_partContext>(i);
		}
		public StoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_story; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStory(this);
		}
	}

	[RuleVersion(0)]
	public StoryContext story() {
		StoryContext _localctx = new StoryContext(Context, State);
		EnterRule(_localctx, 0, RULE_story);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 22;
					import_statement();
					}
					} 
				}
				State = 27;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BEGIN_STATEMENT || _la==Story_String_Start) {
				{
				{
				State = 28;
				story_part();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Story_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public Story_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_story_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStory_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStory_part(this);
		}
	}

	[RuleVersion(0)]
	public Story_partContext story_part() {
		Story_partContext _localctx = new Story_partContext(Context, State);
		EnterRule(_localctx, 2, RULE_story_part);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_STATEMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				embedded_statement();
				}
				break;
			case Story_String_Start:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Story_String_Start() { return GetToken(StoryGrammar.Story_String_Start, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Story_line_terminationContext story_line_termination() {
			return GetRuleContext<Story_line_terminationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Story_Line() { return GetToken(StoryGrammar.Story_Line, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 4, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(Story_String_Start);
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Story_Line) {
				{
				State = 39;
				Match(Story_Line);
				}
			}

			State = 42;
			story_line_termination();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_STATEMENT() { return GetToken(StoryGrammar.BEGIN_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Embedded_Type_Declarer() { return GetToken(StoryGrammar.Embedded_Type_Declarer, 0); }
		public Embedded_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterEmbedded_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitEmbedded_variable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_variable_declarationContext embedded_variable_declaration() {
		Embedded_variable_declarationContext _localctx = new Embedded_variable_declarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_embedded_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			Match(BEGIN_STATEMENT);
			State = 45;
			identifier();
			State = 46;
			Match(Embedded_Type_Declarer);
			State = 47;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_variable_declarationContext embedded_variable_declaration() {
			return GetRuleContext<Embedded_variable_declarationContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 8, RULE_embedded_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			embedded_variable_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_STATEMENT() { return GetToken(StoryGrammar.BEGIN_STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(StoryGrammar.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Exit_Statement() { return GetToken(StoryGrammar.Exit_Statement, 0); }
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterImport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitImport_statement(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_import_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(BEGIN_STATEMENT);
			State = 52;
			Match(IMPORT);
			State = 53;
			string_literal();
			State = 54;
			Match(Exit_Statement);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Story_line_terminationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End_Story_String() { return GetToken(StoryGrammar.End_Story_String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public End_of_fileContext end_of_file() {
			return GetRuleContext<End_of_fileContext>(0);
		}
		public Story_line_terminationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_story_line_termination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStory_line_termination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStory_line_termination(this);
		}
	}

	[RuleVersion(0)]
	public Story_line_terminationContext story_line_termination() {
		Story_line_terminationContext _localctx = new Story_line_terminationContext(Context, State);
		EnterRule(_localctx, 12, RULE_story_line_termination);
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case End_Story_String:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56;
				Match(End_Story_String);
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				end_of_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_String_Literal() { return GetToken(StoryGrammar.Close_String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Embedded_Open_String_Literal() { return GetToken(StoryGrammar.Embedded_Open_String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Code_Open_String_Literal() { return GetToken(StoryGrammar.Code_Open_String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literal_contentContext string_literal_content() {
			return GetRuleContext<String_literal_contentContext>(0);
		}
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 14, RULE_string_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_la = TokenStream.LA(1);
			if ( !(_la==Embedded_Open_String_Literal || _la==Code_Open_String_Literal) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==String_Literal_Character) {
				{
				State = 61;
				string_literal_content();
				}
			}

			State = 64;
			Match(Close_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literal_contentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] String_Literal_Character() { return GetTokens(StoryGrammar.String_Literal_Character); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal_Character(int i) {
			return GetToken(StoryGrammar.String_Literal_Character, i);
		}
		public String_literal_contentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal_content; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterString_literal_content(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitString_literal_content(this);
		}
	}

	[RuleVersion(0)]
	public String_literal_contentContext string_literal_content() {
		String_literal_contentContext _localctx = new String_literal_contentContext(Context, State);
		EnterRule(_localctx, 16, RULE_string_literal_content);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 66;
				Match(String_Literal_Character);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==String_Literal_Character );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Embedded_Identifier() { return GetToken(StoryGrammar.Embedded_Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Code_Identifier() { return GetToken(StoryGrammar.Code_Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_la = TokenStream.LA(1);
			if ( !(_la==Embedded_Identifier || _la==Code_Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class End_of_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(StoryGrammar.Eof, 0); }
		public End_of_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end_of_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterEnd_of_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitEnd_of_file(this);
		}
	}

	[RuleVersion(0)]
	public End_of_fileContext end_of_file() {
		End_of_fileContext _localctx = new End_of_fileContext(Context, State);
		EnterRule(_localctx, 20, RULE_end_of_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'n', 'N', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', '\x4', 
		'\f', '\t', '\f', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x2', '\a', '\x2', ' ', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '#', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\'', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '+', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '=', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x41', '\n', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x6', '\n', '\x46', '\n', '\n', '\r', '\n', '\xE', '\n', 
		'G', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x2', '\x2', '\r', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x2', '\x4', '\x4', '\x2', '=', '=', 'n', 'n', 
		'\x4', '\x2', '<', '<', 'm', 'm', '\x2', 'I', '\x2', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '&', '\x3', '\x2', '\x2', '\x2', '\x6', '(', '\x3', 
		'\x2', '\x2', '\x2', '\b', '.', '\x3', '\x2', '\x2', '\x2', '\n', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '<', '\x3', '\x2', '\x2', '\x2', '\x10', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x45', '\x3', '\x2', '\x2', '\x2', '\x14', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'K', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x1A', '\x5', '\f', '\a', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', '\x1E', '\x3', 
		'\x2', '\x2', '\x2', ' ', '#', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'$', '\'', '\x5', '\n', '\x6', '\x2', '%', '\'', '\x5', '\x6', '\x4', 
		'\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '\x5', '\x3', '\x2', '\x2', '\x2', '(', '*', '\a', '\x6', 
		'\x2', '\x2', ')', '+', '\a', '\v', '\x2', '\x2', '*', ')', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '-', '\x5', '\xE', '\b', '\x2', '-', '\a', '\x3', '\x2', 
		'\x2', '\x2', '.', '/', '\a', '\x3', '\x2', '\x2', '/', '\x30', '\x5', 
		'\x14', '\v', '\x2', '\x30', '\x31', '\a', '\r', '\x2', '\x2', '\x31', 
		'\x32', '\x5', '\x14', '\v', '\x2', '\x32', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x5', '\b', '\x5', '\x2', '\x34', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x3', '\x2', '\x2', '\x36', 
		'\x37', '\a', '\x36', '\x2', '\x2', '\x37', '\x38', '\x5', '\x10', '\t', 
		'\x2', '\x38', '\x39', '\a', '>', '\x2', '\x2', '\x39', '\r', '\x3', '\x2', 
		'\x2', '\x2', ':', '=', '\a', '\f', '\x2', '\x2', ';', '=', '\x5', '\x16', 
		'\f', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', '\x2', 
		'\x2', '\x2', '=', '\xF', '\x3', '\x2', '\x2', '\x2', '>', '@', '\t', 
		'\x2', '\x2', '\x2', '?', '\x41', '\x5', '\x12', '\n', '\x2', '@', '?', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', '@', '\x2', 
		'\x2', '\x43', '\x11', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\a', 
		'?', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'I', 'J', '\t', '\x3', '\x2', '\x2', 'J', '\x15', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\a', '\x2', '\x2', '\x3', 'L', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x1B', '!', '&', '*', '<', '@', 'G',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
