//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\vratelier\Documents\GitHub\GameLab-RnD\Compiler\StoryGrammar.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class StoryGrammar : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TRUE=1, FALSE=2, ASTERISK=3, SLASH=4, SCOPE_OPEN=5, SCOPE_CLOSE=6, StoryEmbedSymbol=7, 
		ImportStatementBegin=8, StoryIfStatementBegin=9, StoryElseStatement=10, 
		LineTerminator=11, New_Line=12, OpenEmbeddedVariableOutsideStory=13, StartSentencePart=14, 
		Identifier=15, Empty_Line=16, Comment=17, Embedded_If_Enter_Condition=18, 
		Embedded_If_Leave_Condition=19, Conditional_Variable=20, COLON=21, COMMA=22, 
		QUESTION_MARK=23, EXCLAMATION_MARK=24, PERIOD=25, LEFT_ANGLE_QUOTATION_MARK=26, 
		RIGHT_ANGLE_QUOTATION_MARK=27, PLUS=28, MINUS=29, REMAINDER=30, MULTIPLY=31, 
		DIVIDE=32, BITWISE_NOT=33, BITWISE_OR=34, BITWISE_XOR=35, BITWISE_AND=36, 
		LEFT_SHIFT=37, RIGHT_SHIFT=38, CONDITIONAL_AND=39, CONDITIONAL_OR=40, 
		CONDITIONAL_NOT=41, Assign=42, AssignAdd=43, AssignSubtract=44, AssignMultiply=45, 
		AssignDivide=46, Greater_Than=47, Less_Than=48, Greater_Than_Or_Equal_To=49, 
		Less_Than_Or_Equal_To=50, Equal_To=51, Not_Equal_To=52, LeftParenthesis=53, 
		RightParenthesis=54, LeftCurlyBracket=55, RigthCurlyBracket=56, LeftSquareBracket=57, 
		RightSquareBracket=58, Boolean=59, Unsigned=60, Tiny=61, Small=62, Big=63, 
		Whole=64, Number=65, Int8=66, UInt8=67, Int16=68, UInt16=69, Int32=70, 
		UInt32=71, Int64=72, UInt64=73, Float32=74, Float64=75, If=76, Else=77, 
		Return=78, Object_Creation_Keyword=79, Object_Self_Keyword=80, Increment=81, 
		Decrement=82, AssignmentOperator=83, Embedded_Whitespace=84, Open_String_Literal=85, 
		EndEmbeddedStatement=86, Integer_Literal=87, Real_Literal=88, Simple_Identifier=89, 
		String_Literal_Character=90, Close_String_Literal=91, Line_Glue=92, Story_Whitespace=93, 
		Sentence_Part=94, Story_NewLine=95, Story_Line_End=96, OpenEmbeddedVariableInsideStory=97, 
		CloseEmbeddedVariable=98, Sentence_Close_Embedded_Variable=99;
	public const int
		RULE_story = 0, RULE_emptySentence = 1, RULE_import_statement = 2, RULE_stringLiteral = 3, 
		RULE_string_literal_value = 4, RULE_storyPart = 5, RULE_storySentence = 6, 
		RULE_storyUnformattedSentence = 7, RULE_storyFormattedSentence = 8, RULE_storyStatement = 9, 
		RULE_storyVariableDeclaration = 10, RULE_storyIfStatement = 11, RULE_literal = 12, 
		RULE_booleanLiteral = 13, RULE_expression = 14, RULE_assignment = 15, 
		RULE_booleanExpression = 16, RULE_expression_statement = 17, RULE_statement_expression = 18, 
		RULE_method_invocation = 19, RULE_invocation_expression = 20, RULE_if_statement = 21, 
		RULE_return_statement = 22, RULE_statement = 23, RULE_declaration_statement = 24, 
		RULE_embedded_statement = 25, RULE_empty_statement = 26, RULE_local_variable_declaration = 27, 
		RULE_selection_statement = 28, RULE_jump_statement = 29, RULE_object_creation_expression = 30, 
		RULE_local_variable_type = 31, RULE_local_variable_initializer = 32, RULE_block = 33, 
		RULE_statement_list = 34, RULE_non_assignment_expression = 35, RULE_multiplicative_expression = 36, 
		RULE_additive_expression = 37, RULE_shift_expression = 38, RULE_relational_expression = 39, 
		RULE_equality_expression = 40, RULE_and_expression = 41, RULE_exclusive_or_expression = 42, 
		RULE_inclusive_or_expression = 43, RULE_conditional_and_expression = 44, 
		RULE_conditional_or_expression = 45, RULE_null_coalescing_expression = 46, 
		RULE_conditional_expression = 47, RULE_unary_expression = 48, RULE_pre_increment_expression = 49, 
		RULE_pre_decrement_expression = 50, RULE_post_increment_expression = 51, 
		RULE_post_decrement_expression = 52, RULE_primary_expression = 53, RULE_primary_expression_start = 54, 
		RULE_bracket_expression = 55, RULE_array_creation_expression = 56, RULE_array_type = 57, 
		RULE_rank_specifier = 58, RULE_non_array_type = 59, RULE_expression_list = 60, 
		RULE_parenthesized_expression = 61, RULE_member_access = 62, RULE_simple_name = 63, 
		RULE_type_argument_list = 64, RULE_type_arguments = 65, RULE_type_argument = 66, 
		RULE_type = 67, RULE_type_parameter = 68, RULE_identifier = 69, RULE_value_type = 70, 
		RULE_non_nullable_value_type = 71, RULE_struct_type = 72, RULE_simple_type = 73, 
		RULE_numeric_type = 74, RULE_floating_point_type = 75, RULE_integral_type = 76, 
		RULE_namespace_name = 77, RULE_type_name = 78, RULE_namespace_or_type_name = 79, 
		RULE_this_access = 80, RULE_argument_list = 81, RULE_argument = 82, RULE_argument_name = 83, 
		RULE_argument_value = 84;
	public static readonly string[] ruleNames = {
		"story", "emptySentence", "import_statement", "stringLiteral", "string_literal_value", 
		"storyPart", "storySentence", "storyUnformattedSentence", "storyFormattedSentence", 
		"storyStatement", "storyVariableDeclaration", "storyIfStatement", "literal", 
		"booleanLiteral", "expression", "assignment", "booleanExpression", "expression_statement", 
		"statement_expression", "method_invocation", "invocation_expression", 
		"if_statement", "return_statement", "statement", "declaration_statement", 
		"embedded_statement", "empty_statement", "local_variable_declaration", 
		"selection_statement", "jump_statement", "object_creation_expression", 
		"local_variable_type", "local_variable_initializer", "block", "statement_list", 
		"non_assignment_expression", "multiplicative_expression", "additive_expression", 
		"shift_expression", "relational_expression", "equality_expression", "and_expression", 
		"exclusive_or_expression", "inclusive_or_expression", "conditional_and_expression", 
		"conditional_or_expression", "null_coalescing_expression", "conditional_expression", 
		"unary_expression", "pre_increment_expression", "pre_decrement_expression", 
		"post_increment_expression", "post_decrement_expression", "primary_expression", 
		"primary_expression_start", "bracket_expression", "array_creation_expression", 
		"array_type", "rank_specifier", "non_array_type", "expression_list", "parenthesized_expression", 
		"member_access", "simple_name", "type_argument_list", "type_arguments", 
		"type_argument", "type", "type_parameter", "identifier", "value_type", 
		"non_nullable_value_type", "struct_type", "simple_type", "numeric_type", 
		"floating_point_type", "integral_type", "namespace_name", "type_name", 
		"namespace_or_type_name", "this_access", "argument_list", "argument", 
		"argument_name", "argument_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'true'", "'false'", "'*'", "'/'", null, null, "'@'", null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "':'", 
		"','", "'?'", "'!'", "'.'", "'<'", "'>'", "'+'", "'-'", "'%'", null, null, 
		"'~'", null, "'^'", "'&'", "'<<'", "'>>'", "'&&'", "'||'", null, "'='", 
		"'+='", "'-='", "'*='", "'/='", null, null, "'>='", "'<='", "'=='", "'!='", 
		"'('", "')'", null, null, "'['", "']'", "'boolean'", "'unsigned'", "'tiny'", 
		"'small'", "'big'", "'whole'", "'number'", null, null, null, null, null, 
		null, null, null, null, null, "'if'", "'else'", "'return'", "'new'", "'this'", 
		"'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TRUE", "FALSE", "ASTERISK", "SLASH", "SCOPE_OPEN", "SCOPE_CLOSE", 
		"StoryEmbedSymbol", "ImportStatementBegin", "StoryIfStatementBegin", "StoryElseStatement", 
		"LineTerminator", "New_Line", "OpenEmbeddedVariableOutsideStory", "StartSentencePart", 
		"Identifier", "Empty_Line", "Comment", "Embedded_If_Enter_Condition", 
		"Embedded_If_Leave_Condition", "Conditional_Variable", "COLON", "COMMA", 
		"QUESTION_MARK", "EXCLAMATION_MARK", "PERIOD", "LEFT_ANGLE_QUOTATION_MARK", 
		"RIGHT_ANGLE_QUOTATION_MARK", "PLUS", "MINUS", "REMAINDER", "MULTIPLY", 
		"DIVIDE", "BITWISE_NOT", "BITWISE_OR", "BITWISE_XOR", "BITWISE_AND", "LEFT_SHIFT", 
		"RIGHT_SHIFT", "CONDITIONAL_AND", "CONDITIONAL_OR", "CONDITIONAL_NOT", 
		"Assign", "AssignAdd", "AssignSubtract", "AssignMultiply", "AssignDivide", 
		"Greater_Than", "Less_Than", "Greater_Than_Or_Equal_To", "Less_Than_Or_Equal_To", 
		"Equal_To", "Not_Equal_To", "LeftParenthesis", "RightParenthesis", "LeftCurlyBracket", 
		"RigthCurlyBracket", "LeftSquareBracket", "RightSquareBracket", "Boolean", 
		"Unsigned", "Tiny", "Small", "Big", "Whole", "Number", "Int8", "UInt8", 
		"Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Float32", "Float64", 
		"If", "Else", "Return", "Object_Creation_Keyword", "Object_Self_Keyword", 
		"Increment", "Decrement", "AssignmentOperator", "Embedded_Whitespace", 
		"Open_String_Literal", "EndEmbeddedStatement", "Integer_Literal", "Real_Literal", 
		"Simple_Identifier", "String_Literal_Character", "Close_String_Literal", 
		"Line_Glue", "Story_Whitespace", "Sentence_Part", "Story_NewLine", "Story_Line_End", 
		"OpenEmbeddedVariableInsideStory", "CloseEmbeddedVariable", "Sentence_Close_Embedded_Variable"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "StoryGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static StoryGrammar() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public StoryGrammar(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public StoryGrammar(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EmptySentenceContext[] emptySentence() {
			return GetRuleContexts<EmptySentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptySentenceContext emptySentence(int i) {
			return GetRuleContext<EmptySentenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_statementContext[] import_statement() {
			return GetRuleContexts<Import_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_statementContext import_statement(int i) {
			return GetRuleContext<Import_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryPartContext[] storyPart() {
			return GetRuleContexts<StoryPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryPartContext storyPart(int i) {
			return GetRuleContext<StoryPartContext>(i);
		}
		public StoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_story; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStory(this);
		}
	}

	[RuleVersion(0)]
	public StoryContext story() {
		StoryContext _localctx = new StoryContext(Context, State);
		EnterRule(_localctx, 0, RULE_story);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 172;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LineTerminator:
						{
						State = 170;
						emptySentence();
						}
						break;
					case ImportStatementBegin:
						{
						State = 171;
						import_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StoryEmbedSymbol) | (1L << StoryIfStatementBegin) | (1L << LineTerminator) | (1L << OpenEmbeddedVariableOutsideStory) | (1L << StartSentencePart))) != 0)) {
				{
				State = 179;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LineTerminator:
					{
					State = 177;
					emptySentence();
					}
					break;
				case StoryEmbedSymbol:
				case StoryIfStatementBegin:
				case OpenEmbeddedVariableOutsideStory:
				case StartSentencePart:
					{
					State = 178;
					storyPart();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptySentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(StoryGrammar.LineTerminator, 0); }
		public EmptySentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptySentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterEmptySentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitEmptySentence(this);
		}
	}

	[RuleVersion(0)]
	public EmptySentenceContext emptySentence() {
		EmptySentenceContext _localctx = new EmptySentenceContext(Context, State);
		EnterRule(_localctx, 2, RULE_emptySentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			Match(LineTerminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ImportStatementBegin() { return GetToken(StoryGrammar.ImportStatementBegin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndEmbeddedStatement() { return GetToken(StoryGrammar.EndEmbeddedStatement, 0); }
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterImport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitImport_statement(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_import_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(ImportStatementBegin);
			State = 187;
			stringLiteral();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EndEmbeddedStatement) {
				{
				State = 188;
				Match(EndEmbeddedStatement);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Open_String_Literal() { return GetToken(StoryGrammar.Open_String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Close_String_Literal() { return GetToken(StoryGrammar.Close_String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public String_literal_valueContext string_literal_value() {
			return GetRuleContext<String_literal_valueContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 6, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(Open_String_Literal);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==String_Literal_Character) {
				{
				State = 192;
				string_literal_value();
				}
			}

			State = 195;
			Match(Close_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literal_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] String_Literal_Character() { return GetTokens(StoryGrammar.String_Literal_Character); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal_Character(int i) {
			return GetToken(StoryGrammar.String_Literal_Character, i);
		}
		public String_literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterString_literal_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitString_literal_value(this);
		}
	}

	[RuleVersion(0)]
	public String_literal_valueContext string_literal_value() {
		String_literal_valueContext _localctx = new String_literal_valueContext(Context, State);
		EnterRule(_localctx, 8, RULE_string_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 197;
				Match(String_Literal_Character);
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==String_Literal_Character );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryStatementContext storyStatement() {
			return GetRuleContext<StoryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StorySentenceContext storySentence() {
			return GetRuleContext<StorySentenceContext>(0);
		}
		public StoryPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStoryPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStoryPart(this);
		}
	}

	[RuleVersion(0)]
	public StoryPartContext storyPart() {
		StoryPartContext _localctx = new StoryPartContext(Context, State);
		EnterRule(_localctx, 10, RULE_storyPart);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StoryEmbedSymbol:
			case StoryIfStatementBegin:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				storyStatement();
				}
				break;
			case OpenEmbeddedVariableOutsideStory:
			case StartSentencePart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				storySentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorySentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryFormattedSentenceContext storyFormattedSentence() {
			return GetRuleContext<StoryFormattedSentenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryUnformattedSentenceContext storyUnformattedSentence() {
			return GetRuleContext<StoryUnformattedSentenceContext>(0);
		}
		public StorySentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storySentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStorySentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStorySentence(this);
		}
	}

	[RuleVersion(0)]
	public StorySentenceContext storySentence() {
		StorySentenceContext _localctx = new StorySentenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_storySentence);
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenEmbeddedVariableOutsideStory:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				storyFormattedSentence();
				}
				break;
			case StartSentencePart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				storyUnformattedSentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryUnformattedSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StartSentencePart() { return GetToken(StoryGrammar.StartSentencePart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sentence_Part() { return GetTokens(StoryGrammar.Sentence_Part); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sentence_Part(int i) {
			return GetToken(StoryGrammar.Sentence_Part, i);
		}
		public StoryUnformattedSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyUnformattedSentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStoryUnformattedSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStoryUnformattedSentence(this);
		}
	}

	[RuleVersion(0)]
	public StoryUnformattedSentenceContext storyUnformattedSentence() {
		StoryUnformattedSentenceContext _localctx = new StoryUnformattedSentenceContext(Context, State);
		EnterRule(_localctx, 14, RULE_storyUnformattedSentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(StartSentencePart);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sentence_Part) {
				{
				{
				State = 211;
				Match(Sentence_Part);
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryFormattedSentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenEmbeddedVariableOutsideStory() { return GetToken(StoryGrammar.OpenEmbeddedVariableOutsideStory, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(StoryGrammar.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(StoryGrammar.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseEmbeddedVariable() { return GetToken(StoryGrammar.CloseEmbeddedVariable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sentence_Part() { return GetTokens(StoryGrammar.Sentence_Part); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sentence_Part(int i) {
			return GetToken(StoryGrammar.Sentence_Part, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpenEmbeddedVariableInsideStory() { return GetTokens(StoryGrammar.OpenEmbeddedVariableInsideStory); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenEmbeddedVariableInsideStory(int i) {
			return GetToken(StoryGrammar.OpenEmbeddedVariableInsideStory, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Sentence_Close_Embedded_Variable() { return GetTokens(StoryGrammar.Sentence_Close_Embedded_Variable); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sentence_Close_Embedded_Variable(int i) {
			return GetToken(StoryGrammar.Sentence_Close_Embedded_Variable, i);
		}
		public StoryFormattedSentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyFormattedSentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStoryFormattedSentence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStoryFormattedSentence(this);
		}
	}

	[RuleVersion(0)]
	public StoryFormattedSentenceContext storyFormattedSentence() {
		StoryFormattedSentenceContext _localctx = new StoryFormattedSentenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_storyFormattedSentence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 217;
			Match(OpenEmbeddedVariableOutsideStory);
			State = 218;
			Match(Identifier);
			State = 219;
			Match(CloseEmbeddedVariable);
			}
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Sentence_Part || _la==OpenEmbeddedVariableInsideStory) {
				{
				State = 225;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenEmbeddedVariableInsideStory:
					{
					{
					State = 221;
					Match(OpenEmbeddedVariableInsideStory);
					State = 222;
					Match(Identifier);
					State = 223;
					Match(Sentence_Close_Embedded_Variable);
					}
					}
					break;
				case Sentence_Part:
					{
					State = 224;
					Match(Sentence_Part);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StoryIfStatementContext storyIfStatement() {
			return GetRuleContext<StoryIfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryVariableDeclarationContext storyVariableDeclaration() {
			return GetRuleContext<StoryVariableDeclarationContext>(0);
		}
		public StoryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStoryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStoryStatement(this);
		}
	}

	[RuleVersion(0)]
	public StoryStatementContext storyStatement() {
		StoryStatementContext _localctx = new StoryStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_storyStatement);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StoryIfStatementBegin:
				EnterOuterAlt(_localctx, 1);
				{
				State = 230;
				storyIfStatement();
				}
				break;
			case StoryEmbedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				storyVariableDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StoryEmbedSymbol() { return GetToken(StoryGrammar.StoryEmbedSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StoryGrammar.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(StoryGrammar.LineTerminator, 0); }
		public StoryVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStoryVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStoryVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StoryVariableDeclarationContext storyVariableDeclaration() {
		StoryVariableDeclarationContext _localctx = new StoryVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_storyVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(StoryEmbedSymbol);
			State = 235;
			identifier();
			State = 236;
			Match(COLON);
			State = 237;
			identifier();
			State = 238;
			Match(LineTerminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoryIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StoryIfStatementBegin() { return GetToken(StoryGrammar.StoryIfStatementBegin, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Embedded_If_Enter_Condition() { return GetToken(StoryGrammar.Embedded_If_Enter_Condition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Embedded_If_Leave_Condition() { return GetToken(StoryGrammar.Embedded_If_Leave_Condition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_OPEN() { return GetToken(StoryGrammar.SCOPE_OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOPE_CLOSE() { return GetToken(StoryGrammar.SCOPE_CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(StoryGrammar.LineTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EmptySentenceContext[] emptySentence() {
			return GetRuleContexts<EmptySentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptySentenceContext emptySentence(int i) {
			return GetRuleContext<EmptySentenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryPartContext[] storyPart() {
			return GetRuleContexts<StoryPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoryPartContext storyPart(int i) {
			return GetRuleContext<StoryPartContext>(i);
		}
		public StoryIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storyIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStoryIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStoryIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public StoryIfStatementContext storyIfStatement() {
		StoryIfStatementContext _localctx = new StoryIfStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_storyIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			Match(StoryIfStatementBegin);
			State = 241;
			Match(Embedded_If_Enter_Condition);
			State = 242;
			booleanExpression();
			State = 243;
			Match(Embedded_If_Leave_Condition);
			State = 244;
			Match(SCOPE_OPEN);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StoryEmbedSymbol) | (1L << StoryIfStatementBegin) | (1L << LineTerminator) | (1L << OpenEmbeddedVariableOutsideStory) | (1L << StartSentencePart))) != 0)) {
				{
				State = 247;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LineTerminator:
					{
					State = 245;
					emptySentence();
					}
					break;
				case StoryEmbedSymbol:
				case StoryIfStatementBegin:
				case OpenEmbeddedVariableOutsideStory:
				case StartSentencePart:
					{
					State = 246;
					storyPart();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 252;
			Match(SCOPE_CLOSE);
			State = 253;
			Match(LineTerminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(StoryGrammar.Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(StoryGrammar.Real_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				booleanLiteral();
				}
				break;
			case Integer_Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				Match(Integer_Literal);
				}
				break;
			case Real_Literal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257;
				Match(Real_Literal);
				}
				break;
			case Open_String_Literal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 258;
				stringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(StoryGrammar.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(StoryGrammar.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 26, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				non_assignment_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				assignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignmentOperator() { return GetToken(StoryGrammar.AssignmentOperator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			unary_expression();
			State = 268;
			Match(AssignmentOperator);
			State = 269;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_booleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_expressionContext statement_expression() {
			return GetRuleContext<Statement_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(StoryGrammar.LineTerminator, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			statement_expression();
			State = 274;
			Match(LineTerminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Invocation_expressionContext invocation_expression() {
			return GetRuleContext<Invocation_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Post_increment_expressionContext post_increment_expression() {
			return GetRuleContext<Post_increment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Post_decrement_expressionContext post_decrement_expression() {
			return GetRuleContext<Post_decrement_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pre_increment_expressionContext pre_increment_expression() {
			return GetRuleContext<Pre_increment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pre_decrement_expressionContext pre_decrement_expression() {
			return GetRuleContext<Pre_decrement_expressionContext>(0);
		}
		public Statement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStatement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStatement_expression(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expressionContext statement_expression() {
		Statement_expressionContext _localctx = new Statement_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement_expression);
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				invocation_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 277;
				object_creation_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 278;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 279;
				post_increment_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 280;
				post_decrement_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 281;
				pre_increment_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 282;
				pre_decrement_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(StoryGrammar.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(StoryGrammar.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterMethod_invocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitMethod_invocation(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocationContext method_invocation() {
		Method_invocationContext _localctx = new Method_invocationContext(Context, State);
		EnterRule(_localctx, 38, RULE_method_invocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(LeftParenthesis);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << PERIOD) | (1L << PLUS) | (1L << MINUS) | (1L << BITWISE_NOT) | (1L << CONDITIONAL_NOT) | (1L << LeftParenthesis))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Object_Creation_Keyword - 79)) | (1L << (Object_Self_Keyword - 79)) | (1L << (Increment - 79)) | (1L << (Decrement - 79)) | (1L << (Open_String_Literal - 79)) | (1L << (Integer_Literal - 79)) | (1L << (Real_Literal - 79)) | (1L << (Simple_Identifier - 79)))) != 0)) {
				{
				State = 286;
				argument_list();
				}
			}

			State = 289;
			Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invocation_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(StoryGrammar.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(StoryGrammar.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Invocation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invocation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterInvocation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitInvocation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Invocation_expressionContext invocation_expression() {
		Invocation_expressionContext _localctx = new Invocation_expressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_invocation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			primary_expression();
			State = 292;
			Match(LeftParenthesis);
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << PERIOD) | (1L << PLUS) | (1L << MINUS) | (1L << BITWISE_NOT) | (1L << CONDITIONAL_NOT) | (1L << LeftParenthesis))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Object_Creation_Keyword - 79)) | (1L << (Object_Self_Keyword - 79)) | (1L << (Increment - 79)) | (1L << (Decrement - 79)) | (1L << (Open_String_Literal - 79)) | (1L << (Integer_Literal - 79)) | (1L << (Real_Literal - 79)) | (1L << (Simple_Identifier - 79)))) != 0)) {
				{
				State = 293;
				argument_list();
				}
			}

			State = 296;
			Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(StoryGrammar.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(StoryGrammar.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(StoryGrammar.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext[] embedded_statement() {
			return GetRuleContexts<Embedded_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement(int i) {
			return GetRuleContext<Embedded_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(StoryGrammar.Else, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 42, RULE_if_statement);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				Match(If);
				State = 299;
				Match(LeftParenthesis);
				State = 300;
				booleanExpression();
				State = 301;
				Match(RightParenthesis);
				State = 302;
				embedded_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304;
				Match(If);
				State = 305;
				Match(LeftParenthesis);
				State = 306;
				booleanExpression();
				State = 307;
				Match(RightParenthesis);
				State = 308;
				embedded_statement();
				State = 309;
				Match(Else);
				State = 310;
				embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(StoryGrammar.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(StoryGrammar.LineTerminator, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(Return);
			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << PERIOD) | (1L << PLUS) | (1L << MINUS) | (1L << BITWISE_NOT) | (1L << CONDITIONAL_NOT) | (1L << LeftParenthesis))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Object_Creation_Keyword - 79)) | (1L << (Object_Self_Keyword - 79)) | (1L << (Increment - 79)) | (1L << (Decrement - 79)) | (1L << (Open_String_Literal - 79)) | (1L << (Integer_Literal - 79)) | (1L << (Real_Literal - 79)) | (1L << (Simple_Identifier - 79)))) != 0)) {
				{
				State = 315;
				expression();
				}
			}

			State = 318;
			Match(LineTerminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_statement);
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				declaration_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321;
				embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(StoryGrammar.LineTerminator, 0); }
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration_statement(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_declaration_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			local_variable_declaration();
			State = 325;
			Match(LineTerminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 50, RULE_embedded_statement);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftCurlyBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				block();
				}
				break;
			case LineTerminator:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328;
				empty_statement();
				}
				break;
			case TRUE:
			case FALSE:
			case PERIOD:
			case PLUS:
			case MINUS:
			case BITWISE_NOT:
			case CONDITIONAL_NOT:
			case LeftParenthesis:
			case Object_Creation_Keyword:
			case Object_Self_Keyword:
			case Increment:
			case Decrement:
			case Open_String_Literal:
			case Integer_Literal:
			case Real_Literal:
			case Simple_Identifier:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329;
				expression_statement();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330;
				selection_statement();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 5);
				{
				State = 331;
				jump_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LineTerminator() { return GetToken(StoryGrammar.LineTerminator, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 52, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(LineTerminator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StoryGrammar.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(StoryGrammar.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_local_variable_declaration);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336;
				identifier();
				State = 337;
				Match(COLON);
				State = 338;
				local_variable_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340;
				identifier();
				State = 341;
				Match(COLON);
				State = 342;
				local_variable_type();
				State = 343;
				Match(Assign);
				State = 344;
				local_variable_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 56, RULE_selection_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			if_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterJump_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitJump_statement(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 58, RULE_jump_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			return_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Object_Creation_Keyword() { return GetToken(StoryGrammar.Object_Creation_Keyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(StoryGrammar.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(StoryGrammar.RightParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(Object_Creation_Keyword);
			State = 353;
			type();
			State = 354;
			Match(LeftParenthesis);
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << PERIOD) | (1L << PLUS) | (1L << MINUS) | (1L << BITWISE_NOT) | (1L << CONDITIONAL_NOT) | (1L << LeftParenthesis))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (Object_Creation_Keyword - 79)) | (1L << (Object_Self_Keyword - 79)) | (1L << (Increment - 79)) | (1L << (Decrement - 79)) | (1L << (Open_String_Literal - 79)) | (1L << (Integer_Literal - 79)) | (1L << (Real_Literal - 79)) | (1L << (Simple_Identifier - 79)))) != 0)) {
				{
				State = 355;
				argument_list();
				}
			}

			State = 358;
			Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 62, RULE_local_variable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(Context, State);
		EnterRule(_localctx, 64, RULE_local_variable_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftCurlyBracket() { return GetToken(StoryGrammar.LeftCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RigthCurlyBracket() { return GetToken(StoryGrammar.RigthCurlyBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(LeftCurlyBracket);
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << LineTerminator) | (1L << PERIOD) | (1L << PLUS) | (1L << MINUS) | (1L << BITWISE_NOT) | (1L << CONDITIONAL_NOT) | (1L << LeftParenthesis) | (1L << LeftCurlyBracket))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (If - 76)) | (1L << (Return - 76)) | (1L << (Object_Creation_Keyword - 76)) | (1L << (Object_Self_Keyword - 76)) | (1L << (Increment - 76)) | (1L << (Decrement - 76)) | (1L << (Open_String_Literal - 76)) | (1L << (Integer_Literal - 76)) | (1L << (Real_Literal - 76)) | (1L << (Simple_Identifier - 76)))) != 0)) {
				{
				State = 365;
				statement_list();
				}
			}

			State = 368;
			Match(RigthCurlyBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 68, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 370;
				statement();
				}
				}
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << LineTerminator) | (1L << PERIOD) | (1L << PLUS) | (1L << MINUS) | (1L << BITWISE_NOT) | (1L << CONDITIONAL_NOT) | (1L << LeftParenthesis) | (1L << LeftCurlyBracket))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (If - 76)) | (1L << (Return - 76)) | (1L << (Object_Creation_Keyword - 76)) | (1L << (Object_Self_Keyword - 76)) | (1L << (Increment - 76)) | (1L << (Decrement - 76)) | (1L << (Open_String_Literal - 76)) | (1L << (Integer_Literal - 76)) | (1L << (Real_Literal - 76)) | (1L << (Simple_Identifier - 76)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_expressionContext conditional_expression() {
			return GetRuleContext<Conditional_expressionContext>(0);
		}
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterNon_assignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitNon_assignment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_non_assignment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			conditional_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(StoryGrammar.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(StoryGrammar.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMAINDER() { return GetToken(StoryGrammar.REMAINDER, 0); }
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		return multiplicative_expression(0);
	}

	private Multiplicative_expressionContext multiplicative_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, _parentState);
		Multiplicative_expressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_multiplicative_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 378;
			unary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 391;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 389;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
						State = 380;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 381;
						Match(MULTIPLY);
						State = 382;
						unary_expression();
						}
						break;
					case 2:
						{
						_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
						State = 383;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 384;
						Match(DIVIDE);
						State = 385;
						unary_expression();
						}
						break;
					case 3:
						{
						_localctx = new Multiplicative_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicative_expression);
						State = 386;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 387;
						Match(REMAINDER);
						State = 388;
						unary_expression();
						}
						break;
					}
					} 
				}
				State = 393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Multiplicative_expressionContext multiplicative_expression() {
			return GetRuleContext<Multiplicative_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(StoryGrammar.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(StoryGrammar.MINUS, 0); }
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		return additive_expression(0);
	}

	private Additive_expressionContext additive_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, _parentState);
		Additive_expressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_additive_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 395;
			multiplicative_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 405;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 403;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new Additive_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
						State = 397;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 398;
						Match(PLUS);
						State = 399;
						multiplicative_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Additive_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additive_expression);
						State = 400;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 401;
						Match(MINUS);
						State = 402;
						multiplicative_expression(0);
						}
						break;
					}
					} 
				}
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Additive_expressionContext additive_expression() {
			return GetRuleContext<Additive_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SHIFT() { return GetToken(StoryGrammar.LEFT_SHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SHIFT() { return GetToken(StoryGrammar.RIGHT_SHIFT, 0); }
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		return shift_expression(0);
	}

	private Shift_expressionContext shift_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, _parentState);
		Shift_expressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_shift_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 409;
			additive_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 417;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						_localctx = new Shift_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 411;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 412;
						Match(LEFT_SHIFT);
						State = 413;
						additive_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Shift_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 414;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 415;
						Match(RIGHT_SHIFT);
						State = 416;
						additive_expression(0);
						}
						break;
					}
					} 
				}
				State = 421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than() { return GetToken(StoryGrammar.Less_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than() { return GetToken(StoryGrammar.Greater_Than, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Less_Than_Or_Equal_To() { return GetToken(StoryGrammar.Less_Than_Or_Equal_To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater_Than_Or_Equal_To() { return GetToken(StoryGrammar.Greater_Than_Or_Equal_To, 0); }
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 423;
			shift_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 439;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 437;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 425;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 426;
						Match(Less_Than);
						State = 427;
						shift_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 428;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 429;
						Match(Greater_Than);
						State = 430;
						shift_expression(0);
						}
						break;
					case 3:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 431;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 432;
						Match(Less_Than_Or_Equal_To);
						State = 433;
						shift_expression(0);
						}
						break;
					case 4:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 434;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 435;
						Match(Greater_Than_Or_Equal_To);
						State = 436;
						shift_expression(0);
						}
						break;
					}
					} 
				}
				State = 441;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal_To() { return GetToken(StoryGrammar.Equal_To, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not_Equal_To() { return GetToken(StoryGrammar.Not_Equal_To, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_equality_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 443;
			relational_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 453;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 451;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
					case 1:
						{
						_localctx = new Equality_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
						State = 445;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 446;
						Match(Equal_To);
						State = 447;
						relational_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Equality_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
						State = 448;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 449;
						Match(Not_Equal_To);
						State = 450;
						relational_expression(0);
						}
						break;
					}
					} 
				}
				State = 455;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND() { return GetToken(StoryGrammar.BITWISE_AND, 0); }
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		return and_expression(0);
	}

	private And_expressionContext and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_expressionContext _localctx = new And_expressionContext(Context, _parentState);
		And_expressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 457;
			equality_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 464;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_and_expression);
					State = 459;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 460;
					Match(BITWISE_AND);
					State = 461;
					equality_expression(0);
					}
					} 
				}
				State = 466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression() {
			return GetRuleContext<And_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR() { return GetToken(StoryGrammar.BITWISE_XOR, 0); }
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		return exclusive_or_expression(0);
	}

	private Exclusive_or_expressionContext exclusive_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, _parentState);
		Exclusive_or_expressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_exclusive_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 468;
			and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Exclusive_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusive_or_expression);
					State = 470;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 471;
					Match(BITWISE_XOR);
					State = 472;
					and_expression(0);
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Exclusive_or_expressionContext exclusive_or_expression() {
			return GetRuleContext<Exclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(StoryGrammar.BITWISE_OR, 0); }
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		return inclusive_or_expression(0);
	}

	private Inclusive_or_expressionContext inclusive_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, _parentState);
		Inclusive_or_expressionContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_inclusive_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 479;
			exclusive_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Inclusive_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusive_or_expression);
					State = 481;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 482;
					Match(BITWISE_OR);
					State = 483;
					exclusive_or_expression(0);
					}
					} 
				}
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Inclusive_or_expressionContext inclusive_or_expression() {
			return GetRuleContext<Inclusive_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext conditional_and_expression() {
			return GetRuleContext<Conditional_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_AND() { return GetToken(StoryGrammar.CONDITIONAL_AND, 0); }
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		return conditional_and_expression(0);
	}

	private Conditional_and_expressionContext conditional_and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, _parentState);
		Conditional_and_expressionContext _prevctx = _localctx;
		int _startState = 88;
		EnterRecursionRule(_localctx, 88, RULE_conditional_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 490;
			inclusive_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Conditional_and_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditional_and_expression);
					State = 492;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 493;
					Match(CONDITIONAL_AND);
					State = 494;
					inclusive_or_expression(0);
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_and_expressionContext conditional_and_expression() {
			return GetRuleContext<Conditional_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_OR() { return GetToken(StoryGrammar.CONDITIONAL_OR, 0); }
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		return conditional_or_expression(0);
	}

	private Conditional_or_expressionContext conditional_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, _parentState);
		Conditional_or_expressionContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_conditional_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 501;
			conditional_and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 508;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Conditional_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditional_or_expression);
					State = 503;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 504;
					Match(CONDITIONAL_OR);
					State = 505;
					conditional_and_expression(0);
					}
					} 
				}
				State = 510;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_null_coalescing_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			conditional_or_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(StoryGrammar.QUESTION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StoryGrammar.COLON, 0); }
		public Conditional_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterConditional_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitConditional_expression(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_expressionContext conditional_expression() {
		Conditional_expressionContext _localctx = new Conditional_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_conditional_expression);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513;
				null_coalescing_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 514;
				null_coalescing_expression();
				State = 515;
				Match(QUESTION_MARK);
				State = 516;
				expression();
				State = 517;
				Match(COLON);
				State = 518;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(StoryGrammar.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(StoryGrammar.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITIONAL_NOT() { return GetToken(StoryGrammar.CONDITIONAL_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(StoryGrammar.BITWISE_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pre_increment_expressionContext pre_increment_expression() {
			return GetRuleContext<Pre_increment_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pre_decrement_expressionContext pre_decrement_expression() {
			return GetRuleContext<Pre_decrement_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_unary_expression);
		try {
			State = 533;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case PERIOD:
			case LeftParenthesis:
			case Object_Creation_Keyword:
			case Object_Self_Keyword:
			case Open_String_Literal:
			case Integer_Literal:
			case Real_Literal:
			case Simple_Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522;
				primary_expression();
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523;
				Match(PLUS);
				State = 524;
				unary_expression();
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 525;
				Match(MINUS);
				State = 526;
				unary_expression();
				}
				break;
			case CONDITIONAL_NOT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 527;
				Match(CONDITIONAL_NOT);
				State = 528;
				unary_expression();
				}
				break;
			case BITWISE_NOT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 529;
				Match(BITWISE_NOT);
				State = 530;
				unary_expression();
				}
				break;
			case Increment:
				EnterOuterAlt(_localctx, 6);
				{
				State = 531;
				pre_increment_expression();
				}
				break;
			case Decrement:
				EnterOuterAlt(_localctx, 7);
				{
				State = 532;
				pre_decrement_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_increment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(StoryGrammar.Increment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_increment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_increment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterPre_increment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitPre_increment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pre_increment_expressionContext pre_increment_expression() {
		Pre_increment_expressionContext _localctx = new Pre_increment_expressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_pre_increment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			Match(Increment);
			State = 536;
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_decrement_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(StoryGrammar.Decrement, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_decrement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_decrement_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterPre_decrement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitPre_decrement_expression(this);
		}
	}

	[RuleVersion(0)]
	public Pre_decrement_expressionContext pre_decrement_expression() {
		Pre_decrement_expressionContext _localctx = new Pre_decrement_expressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_pre_decrement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(Decrement);
			State = 539;
			unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Post_increment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment() { return GetToken(StoryGrammar.Increment, 0); }
		public Post_increment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post_increment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterPost_increment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitPost_increment_expression(this);
		}
	}

	[RuleVersion(0)]
	public Post_increment_expressionContext post_increment_expression() {
		Post_increment_expressionContext _localctx = new Post_increment_expressionContext(Context, State);
		EnterRule(_localctx, 102, RULE_post_increment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			primary_expression();
			State = 542;
			Match(Increment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Post_decrement_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement() { return GetToken(StoryGrammar.Decrement, 0); }
		public Post_decrement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_post_decrement_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterPost_decrement_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitPost_decrement_expression(this);
		}
	}

	[RuleVersion(0)]
	public Post_decrement_expressionContext post_decrement_expression() {
		Post_decrement_expressionContext _localctx = new Post_decrement_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_post_decrement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			primary_expression();
			State = 545;
			Match(Decrement);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext[] member_access() {
			return GetRuleContexts<Member_accessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access(int i) {
			return GetRuleContext<Member_accessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext[] method_invocation() {
			return GetRuleContexts<Method_invocationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_invocationContext method_invocation(int i) {
			return GetRuleContext<Method_invocationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Increment() { return GetTokens(StoryGrammar.Increment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Increment(int i) {
			return GetToken(StoryGrammar.Increment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Decrement() { return GetTokens(StoryGrammar.Decrement); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decrement(int i) {
			return GetToken(StoryGrammar.Decrement, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 106, RULE_primary_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 547;
			primary_expression_start();
			State = 551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 548;
					bracket_expression();
					}
					} 
				}
				State = 553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 569;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 559;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PERIOD:
						{
						State = 554;
						member_access();
						}
						break;
					case LeftParenthesis:
						{
						State = 555;
						method_invocation();
						}
						break;
					case Increment:
						{
						State = 556;
						Match(Increment);
						}
						break;
					case Decrement:
						{
						State = 557;
						Match(Decrement);
						}
						break;
					case Simple_Identifier:
						{
						State = 558;
						identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 564;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 561;
							bracket_expression();
							}
							} 
						}
						State = 566;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
					}
					}
					} 
				}
				State = 571;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Member_accessContext member_access() {
			return GetRuleContext<Member_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public This_accessContext this_access() {
			return GetRuleContext<This_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_creation_expressionContext object_creation_expression() {
			return GetRuleContext<Object_creation_expressionContext>(0);
		}
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterPrimary_expression_start(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitPrimary_expression_start(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 108, RULE_primary_expression_start);
		try {
			State = 578;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
			case Open_String_Literal:
			case Integer_Literal:
			case Real_Literal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 572;
				literal();
				}
				break;
			case Simple_Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				simple_name();
				}
				break;
			case LeftParenthesis:
				EnterOuterAlt(_localctx, 3);
				{
				State = 574;
				parenthesized_expression();
				}
				break;
			case PERIOD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 575;
				member_access();
				}
				break;
			case Object_Self_Keyword:
				EnterOuterAlt(_localctx, 5);
				{
				State = 576;
				this_access();
				}
				break;
			case Object_Creation_Keyword:
				EnterOuterAlt(_localctx, 6);
				{
				State = 577;
				object_creation_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(StoryGrammar.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(StoryGrammar.RightSquareBracket, 0); }
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 110, RULE_bracket_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(LeftSquareBracket);
			State = 581;
			argument_list();
			State = 582;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_creation_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Object_Creation_Keyword() { return GetToken(StoryGrammar.Object_Creation_Keyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Non_array_typeContext non_array_type() {
			return GetRuleContext<Non_array_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(StoryGrammar.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(StoryGrammar.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_creation_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterArray_creation_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitArray_creation_expression(this);
		}
	}

	[RuleVersion(0)]
	public Array_creation_expressionContext array_creation_expression() {
		Array_creation_expressionContext _localctx = new Array_creation_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_array_creation_expression);
		int _la;
		try {
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 584;
				Match(Object_Creation_Keyword);
				State = 585;
				non_array_type();
				State = 586;
				Match(LeftSquareBracket);
				State = 587;
				expression_list(0);
				State = 588;
				Match(RightSquareBracket);
				State = 592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LeftSquareBracket) {
					{
					{
					State = 589;
					rank_specifier();
					}
					}
					State = 594;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 595;
				Match(Object_Creation_Keyword);
				State = 596;
				array_type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Non_array_typeContext non_array_type() {
			return GetRuleContext<Non_array_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 114, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			non_array_type();
			State = 601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 600;
				rank_specifier();
				}
				}
				State = 603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LeftSquareBracket );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftSquareBracket() { return GetToken(StoryGrammar.LeftSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightSquareBracket() { return GetToken(StoryGrammar.RightSquareBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(StoryGrammar.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(StoryGrammar.COMMA, i);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(Context, State);
		EnterRule(_localctx, 116, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 605;
			Match(LeftSquareBracket);
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 606;
				Match(COMMA);
				}
				}
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 612;
			Match(RightSquareBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_array_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter() {
			return GetRuleContext<Type_parameterContext>(0);
		}
		public Non_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_array_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterNon_array_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitNon_array_type(this);
		}
	}

	[RuleVersion(0)]
	public Non_array_typeContext non_array_type() {
		Non_array_typeContext _localctx = new Non_array_typeContext(Context, State);
		EnterRule(_localctx, 118, RULE_non_array_type);
		try {
			State = 616;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614;
				value_type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615;
				type_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(StoryGrammar.COMMA, 0); }
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		return expression_list(0);
	}

	private Expression_listContext expression_list(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expression_listContext _localctx = new Expression_listContext(Context, _parentState);
		Expression_listContext _prevctx = _localctx;
		int _startState = 120;
		EnterRecursionRule(_localctx, 120, RULE_expression_list, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 619;
			expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 626;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_listContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression_list);
					State = 621;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 622;
					Match(COMMA);
					State = 623;
					expression();
					}
					} 
				}
				State = 628;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParenthesis() { return GetToken(StoryGrammar.LeftParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParenthesis() { return GetToken(StoryGrammar.RightParenthesis, 0); }
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 122, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			Match(LeftParenthesis);
			State = 630;
			expression();
			State = 631;
			Match(RightParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(StoryGrammar.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 124, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633;
			Match(PERIOD);
			State = 634;
			identifier();
			State = 636;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 635;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(Context, State);
		EnterRule(_localctx, 126, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			identifier();
			State = 640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 639;
				type_argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_ANGLE_QUOTATION_MARK() { return GetToken(StoryGrammar.LEFT_ANGLE_QUOTATION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_argumentsContext type_arguments() {
			return GetRuleContext<Type_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_ANGLE_QUOTATION_MARK() { return GetToken(StoryGrammar.RIGHT_ANGLE_QUOTATION_MARK, 0); }
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 128, RULE_type_argument_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 642;
			Match(LEFT_ANGLE_QUOTATION_MARK);
			State = 643;
			type_arguments();
			State = 644;
			Match(RIGHT_ANGLE_QUOTATION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_argumentContext[] type_argument() {
			return GetRuleContexts<Type_argumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argumentContext type_argument(int i) {
			return GetRuleContext<Type_argumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(StoryGrammar.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(StoryGrammar.COMMA, i);
		}
		public Type_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterType_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitType_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentsContext type_arguments() {
		Type_argumentsContext _localctx = new Type_argumentsContext(Context, State);
		EnterRule(_localctx, 130, RULE_type_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			type_argument();
			State = 651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 647;
				Match(COMMA);
				State = 648;
				type_argument();
				}
				}
				State = 653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Type_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterType_argument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitType_argument(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentContext type_argument() {
		Type_argumentContext _localctx = new Type_argumentContext(Context, State);
		EnterRule(_localctx, 132, RULE_type_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Value_typeContext value_type() {
			return GetRuleContext<Value_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_parameterContext type_parameter() {
			return GetRuleContext<Type_parameterContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 134, RULE_type);
		try {
			State = 659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657;
				value_type();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 658;
				type_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 136, RULE_type_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Simple_Identifier() { return GetToken(StoryGrammar.Simple_Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 138, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(Simple_Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Non_nullable_value_typeContext non_nullable_value_type() {
			return GetRuleContext<Non_nullable_value_typeContext>(0);
		}
		public Value_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterValue_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitValue_type(this);
		}
	}

	[RuleVersion(0)]
	public Value_typeContext value_type() {
		Value_typeContext _localctx = new Value_typeContext(Context, State);
		EnterRule(_localctx, 140, RULE_value_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			non_nullable_value_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_nullable_value_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_typeContext struct_type() {
			return GetRuleContext<Struct_typeContext>(0);
		}
		public Non_nullable_value_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_nullable_value_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterNon_nullable_value_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitNon_nullable_value_type(this);
		}
	}

	[RuleVersion(0)]
	public Non_nullable_value_typeContext non_nullable_value_type() {
		Non_nullable_value_typeContext _localctx = new Non_nullable_value_typeContext(Context, State);
		EnterRule(_localctx, 142, RULE_non_nullable_value_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			struct_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Struct_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterStruct_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitStruct_type(this);
		}
	}

	[RuleVersion(0)]
	public Struct_typeContext struct_type() {
		Struct_typeContext _localctx = new Struct_typeContext(Context, State);
		EnterRule(_localctx, 144, RULE_struct_type);
		try {
			State = 671;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Simple_Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669;
				type_name();
				}
				break;
			case Boolean:
			case Int8:
			case UInt8:
			case Int16:
			case UInt16:
			case Int32:
			case UInt32:
			case Int64:
			case UInt64:
			case Float32:
			case Float64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670;
				simple_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(StoryGrammar.Boolean, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 146, RULE_simple_type);
		try {
			State = 675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Int8:
			case UInt8:
			case Int16:
			case UInt16:
			case Int32:
			case UInt32:
			case Int64:
			case UInt64:
			case Float32:
			case Float64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673;
				numeric_type();
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674;
				Match(Boolean);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 148, RULE_numeric_type);
		try {
			State = 679;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Int8:
			case UInt8:
			case Int16:
			case UInt16:
			case Int32:
			case UInt32:
			case Int64:
			case UInt64:
				EnterOuterAlt(_localctx, 1);
				{
				State = 677;
				integral_type();
				}
				break;
			case Float32:
			case Float64:
				EnterOuterAlt(_localctx, 2);
				{
				State = 678;
				floating_point_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float32() { return GetToken(StoryGrammar.Float32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float64() { return GetToken(StoryGrammar.Float64, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 150, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = TokenStream.LA(1);
			if ( !(_la==Float32 || _la==Float64) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int8() { return GetToken(StoryGrammar.Int8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt8() { return GetToken(StoryGrammar.UInt8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int16() { return GetToken(StoryGrammar.Int16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt16() { return GetToken(StoryGrammar.UInt16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int32() { return GetToken(StoryGrammar.Int32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt32() { return GetToken(StoryGrammar.UInt32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int64() { return GetToken(StoryGrammar.Int64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UInt64() { return GetToken(StoryGrammar.UInt64, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 152, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (Int8 - 66)) | (1L << (UInt8 - 66)) | (1L << (Int16 - 66)) | (1L << (UInt16 - 66)) | (1L << (Int32 - 66)) | (1L << (UInt32 - 66)) | (1L << (Int64 - 66)) | (1L << (UInt64 - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 154, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			namespace_or_type_name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 156, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			namespace_or_type_name(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(StoryGrammar.PERIOD, 0); }
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		return namespace_or_type_name(0);
	}

	private Namespace_or_type_nameContext namespace_or_type_name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, _parentState);
		Namespace_or_type_nameContext _prevctx = _localctx;
		int _startState = 158;
		EnterRecursionRule(_localctx, 158, RULE_namespace_or_type_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 690;
			identifier();
			State = 692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 691;
				type_argument_list();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 702;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Namespace_or_type_nameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_namespace_or_type_name);
					State = 694;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 695;
					Match(PERIOD);
					State = 696;
					identifier();
					State = 698;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
					case 1:
						{
						State = 697;
						type_argument_list();
						}
						break;
					}
					}
					} 
				}
				State = 704;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class This_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Object_Self_Keyword() { return GetToken(StoryGrammar.Object_Self_Keyword, 0); }
		public This_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterThis_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitThis_access(this);
		}
	}

	[RuleVersion(0)]
	public This_accessContext this_access() {
		This_accessContext _localctx = new This_accessContext(Context, State);
		EnterRule(_localctx, 160, RULE_this_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(Object_Self_Keyword);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(StoryGrammar.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(StoryGrammar.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 162, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 707;
			argument();
			State = 712;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 708;
				Match(COMMA);
				State = 709;
				argument();
				}
				}
				State = 714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Argument_valueContext argument_value() {
			return GetRuleContext<Argument_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Argument_nameContext argument_name() {
			return GetRuleContext<Argument_nameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 164, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 715;
				argument_name();
				}
				break;
			}
			State = 718;
			argument_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(StoryGrammar.COLON, 0); }
		public Argument_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterArgument_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitArgument_name(this);
		}
	}

	[RuleVersion(0)]
	public Argument_nameContext argument_name() {
		Argument_nameContext _localctx = new Argument_nameContext(Context, State);
		EnterRule(_localctx, 166, RULE_argument_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 720;
			identifier();
			State = 721;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Argument_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.EnterArgument_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IStoryGrammarListener typedListener = listener as IStoryGrammarListener;
			if (typedListener != null) typedListener.ExitArgument_value(this);
		}
	}

	[RuleVersion(0)]
	public Argument_valueContext argument_value() {
		Argument_valueContext _localctx = new Argument_valueContext(Context, State);
		EnterRule(_localctx, 168, RULE_argument_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 36: return multiplicative_expression_sempred((Multiplicative_expressionContext)_localctx, predIndex);
		case 37: return additive_expression_sempred((Additive_expressionContext)_localctx, predIndex);
		case 38: return shift_expression_sempred((Shift_expressionContext)_localctx, predIndex);
		case 39: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 40: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);
		case 41: return and_expression_sempred((And_expressionContext)_localctx, predIndex);
		case 42: return exclusive_or_expression_sempred((Exclusive_or_expressionContext)_localctx, predIndex);
		case 43: return inclusive_or_expression_sempred((Inclusive_or_expressionContext)_localctx, predIndex);
		case 44: return conditional_and_expression_sempred((Conditional_and_expressionContext)_localctx, predIndex);
		case 45: return conditional_or_expression_sempred((Conditional_or_expressionContext)_localctx, predIndex);
		case 60: return expression_list_sempred((Expression_listContext)_localctx, predIndex);
		case 79: return namespace_or_type_name_sempred((Namespace_or_type_nameContext)_localctx, predIndex);
		}
		return true;
	}
	private bool multiplicative_expression_sempred(Multiplicative_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additive_expression_sempred(Additive_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shift_expression_sempred(Shift_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool and_expression_sempred(And_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusive_or_expression_sempred(Exclusive_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusive_or_expression_sempred(Inclusive_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditional_and_expression_sempred(Conditional_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditional_or_expression_sempred(Conditional_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_list_sempred(Expression_listContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool namespace_or_type_name_sempred(Namespace_or_type_nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x65', '\x2D8', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\xAF', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xB2', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\xB6', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\xB9', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xC0', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\xC4', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x6', '\x6', '\xC9', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', '\xCA', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xCF', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xD3', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '\xD7', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xDA', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\xE4', '\n', '\n', '\f', '\n', '\xE', '\n', '\xE7', '\v', '\n', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '\xEB', '\n', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\xFA', '\n', '\r', '\f', '\r', '\xE', '\r', '\xFD', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x106', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x10C', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x11E', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x122', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x129', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x13B', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x13F', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x145', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x14F', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x15D', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x167', 
		'\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x171', '\n', '#', '\x3', 
		'#', '\x3', '#', '\x3', '$', '\x6', '$', '\x176', '\n', '$', '\r', '$', 
		'\xE', '$', '\x177', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x188', '\n', '&', 
		'\f', '&', '\xE', '&', '\x18B', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\a', '\'', '\x196', '\n', '\'', '\f', '\'', '\xE', '\'', 
		'\x199', '\v', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x1A4', 
		'\n', '(', '\f', '(', '\xE', '(', '\x1A7', '\v', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\a', ')', '\x1B8', '\n', ')', '\f', ')', '\xE', ')', 
		'\x1BB', '\v', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x1C6', 
		'\n', '*', '\f', '*', '\xE', '*', '\x1C9', '\v', '*', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x1D1', 
		'\n', '+', '\f', '+', '\xE', '+', '\x1D4', '\v', '+', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', ',', '\x1DC', 
		'\n', ',', '\f', ',', '\xE', ',', '\x1DF', '\v', ',', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x1E7', 
		'\n', '-', '\f', '-', '\xE', '-', '\x1EA', '\v', '-', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x1F2', 
		'\n', '.', '\f', '.', '\xE', '.', '\x1F5', '\v', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x1FD', 
		'\n', '/', '\f', '/', '\xE', '/', '\x200', '\v', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x20B', '\n', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x218', '\n', '\x32', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x37', '\x3', '\x37', '\a', '\x37', '\x228', '\n', '\x37', 
		'\f', '\x37', '\xE', '\x37', '\x22B', '\v', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x232', 
		'\n', '\x37', '\x3', '\x37', '\a', '\x37', '\x235', '\n', '\x37', '\f', 
		'\x37', '\xE', '\x37', '\x238', '\v', '\x37', '\a', '\x37', '\x23A', '\n', 
		'\x37', '\f', '\x37', '\xE', '\x37', '\x23D', '\v', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x5', '\x38', '\x245', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\a', ':', '\x251', '\n', ':', '\f', ':', '\xE', 
		':', '\x254', '\v', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x258', 
		'\n', ':', '\x3', ';', '\x3', ';', '\x6', ';', '\x25C', '\n', ';', '\r', 
		';', '\xE', ';', '\x25D', '\x3', '<', '\x3', '<', '\a', '<', '\x262', 
		'\n', '<', '\f', '<', '\xE', '<', '\x265', '\v', '<', '\x3', '<', '\x3', 
		'<', '\x3', '=', '\x3', '=', '\x5', '=', '\x26B', '\n', '=', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\a', '>', 
		'\x273', '\n', '>', '\f', '>', '\xE', '>', '\x276', '\v', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x5', '@', '\x27F', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x5', 
		'\x41', '\x283', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', '\x43', 
		'\x28C', '\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x28F', '\v', '\x43', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x5', '\x45', '\x296', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 
		'J', '\x3', 'J', '\x5', 'J', '\x2A2', '\n', 'J', '\x3', 'K', '\x3', 'K', 
		'\x5', 'K', '\x2A6', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x2AA', 
		'\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'O', 
		'\x3', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x5', 'Q', '\x2B7', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x5', 'Q', '\x2BD', '\n', 'Q', '\a', 'Q', '\x2BF', '\n', 'Q', '\f', 
		'Q', '\xE', 'Q', '\x2C2', '\v', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\a', 'S', '\x2C9', '\n', 'S', '\f', 'S', '\xE', 
		'S', '\x2CC', '\v', 'S', '\x3', 'T', '\x5', 'T', '\x2CF', '\n', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x2', '\xE', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', 'z', '\xA0', 'W', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 
		'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 
		'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', 
		'\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', 
		'\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', 
		'\xAA', '\x2', '\x5', '\x3', '\x2', '\x3', '\x4', '\x3', '\x2', 'L', 'M', 
		'\x3', '\x2', '\x44', 'K', '\x2', '\x2E0', '\x2', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x6', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\xC8', '\x3', '\x2', '\x2', '\x2', '\f', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\xD2', '\x3', '\x2', '\x2', '\x2', '\x10', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xEC', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x10B', '\x3', '\x2', '\x2', '\x2', ' ', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x111', '\x3', '\x2', '\x2', '\x2', '$', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x11F', '\x3', '\x2', '\x2', '\x2', '*', '\x125', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x13A', '\x3', '\x2', '\x2', '\x2', '.', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x146', '\x3', '\x2', '\x2', '\x2', '\x34', '\x14E', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x150', '\x3', '\x2', '\x2', '\x2', '\x38', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x160', '\x3', '\x2', '\x2', '\x2', '>', '\x162', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x42', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x175', '\x3', '\x2', '\x2', '\x2', 'H', '\x179', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x17B', '\x3', '\x2', '\x2', '\x2', 'L', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x19A', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x1A8', '\x3', '\x2', '\x2', '\x2', 'R', '\x1BC', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x1CA', '\x3', '\x2', '\x2', '\x2', 'V', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\\', '\x1F6', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x201', '\x3', '\x2', '\x2', '\x2', '`', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x217', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x219', '\x3', '\x2', '\x2', '\x2', '\x66', '\x21C', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x21F', '\x3', '\x2', '\x2', '\x2', 'j', '\x222', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x225', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x244', '\x3', '\x2', '\x2', '\x2', 'p', '\x246', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x257', '\x3', '\x2', '\x2', '\x2', 't', '\x259', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x26A', '\x3', '\x2', '\x2', '\x2', 'z', '\x26C', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x277', '\x3', '\x2', '\x2', '\x2', '~', '\x27B', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x280', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x284', '\x3', '\x2', '\x2', '\x2', '\x84', '\x288', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x290', '\x3', '\x2', '\x2', '\x2', '\x88', '\x295', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x299', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x29B', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x92', '\x2A1', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x98', '\x2AB', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x2AF', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x2B1', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x2C3', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x2CE', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x2D2', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAF', '\x5', '\x4', 
		'\x3', '\x2', '\xAD', '\xAF', '\x5', '\x6', '\x4', '\x2', '\xAE', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB6', '\x5', '\x4', '\x3', '\x2', '\xB4', '\xB6', '\x5', '\f', 
		'\a', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x3', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\r', '\x2', '\x2', 
		'\xBB', '\x5', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\a', '\n', 
		'\x2', '\x2', '\xBD', '\xBF', '\x5', '\b', '\x5', '\x2', '\xBE', '\xC0', 
		'\a', 'X', '\x2', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\xC1', '\xC3', '\a', 'W', '\x2', '\x2', '\xC2', '\xC4', '\x5', 
		'\n', '\x6', '\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC6', '\a', ']', '\x2', '\x2', '\xC6', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xC9', '\a', '\\', '\x2', '\x2', '\xC8', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\v', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', 
		'\x5', '\x14', '\v', '\x2', '\xCD', '\xCF', '\x5', '\xE', '\b', '\x2', 
		'\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCD', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\r', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', 
		'\x5', '\x12', '\n', '\x2', '\xD1', '\xD3', '\x5', '\x10', '\t', '\x2', 
		'\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xF', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD8', 
		'\a', '\x10', '\x2', '\x2', '\xD5', '\xD7', '\a', '`', '\x2', '\x2', '\xD6', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\x11', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', '\xF', '\x2', 
		'\x2', '\xDC', '\xDD', '\a', '\x11', '\x2', '\x2', '\xDD', '\xDE', '\a', 
		'\x64', '\x2', '\x2', '\xDE', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\a', '\x63', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x11', '\x2', 
		'\x2', '\xE1', '\xE4', '\a', '\x65', '\x2', '\x2', '\xE2', '\xE4', '\a', 
		'`', '\x2', '\x2', '\xE3', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\x13', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x5', '\x18', '\r', 
		'\x2', '\xE9', '\xEB', '\x5', '\x16', '\f', '\x2', '\xEA', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\t', '\x2', 
		'\x2', '\xED', '\xEE', '\x5', '\x8C', 'G', '\x2', '\xEE', '\xEF', '\a', 
		'\x17', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\x8C', 'G', '\x2', '\xF0', 
		'\xF1', '\a', '\r', '\x2', '\x2', '\xF1', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\a', '\v', '\x2', '\x2', '\xF3', '\xF4', '\a', 
		'\x14', '\x2', '\x2', '\xF4', '\xF5', '\x5', '\"', '\x12', '\x2', '\xF5', 
		'\xF6', '\a', '\x15', '\x2', '\x2', '\xF6', '\xFB', '\a', '\a', '\x2', 
		'\x2', '\xF7', '\xFA', '\x5', '\x4', '\x3', '\x2', '\xF8', '\xFA', '\x5', 
		'\f', '\a', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\a', '\b', '\x2', 
		'\x2', '\xFF', '\x100', '\a', '\r', '\x2', '\x2', '\x100', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x106', '\x5', '\x1C', '\xF', '\x2', '\x102', 
		'\x106', '\a', 'Y', '\x2', '\x2', '\x103', '\x106', '\a', 'Z', '\x2', 
		'\x2', '\x104', '\x106', '\x5', '\b', '\x5', '\x2', '\x105', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x103', '\x3', '\x2', '\x2', '\x2', '\x105', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x108', '\t', '\x2', '\x2', '\x2', '\x108', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10C', '\x5', 'H', '%', '\x2', '\x10A', '\x10C', '\x5', 
		' ', '\x11', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10E', '\x5', '\x62', '\x32', '\x2', '\x10E', '\x10F', 
		'\a', 'U', '\x2', '\x2', '\x10F', '\x110', '\x5', '\x1E', '\x10', '\x2', 
		'\x110', '!', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x5', '\x1E', 
		'\x10', '\x2', '\x112', '#', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', 
		'\x5', '&', '\x14', '\x2', '\x114', '\x115', '\a', '\r', '\x2', '\x2', 
		'\x115', '%', '\x3', '\x2', '\x2', '\x2', '\x116', '\x11E', '\x5', '*', 
		'\x16', '\x2', '\x117', '\x11E', '\x5', '>', ' ', '\x2', '\x118', '\x11E', 
		'\x5', ' ', '\x11', '\x2', '\x119', '\x11E', '\x5', 'h', '\x35', '\x2', 
		'\x11A', '\x11E', '\x5', 'j', '\x36', '\x2', '\x11B', '\x11E', '\x5', 
		'\x64', '\x33', '\x2', '\x11C', '\x11E', '\x5', '\x66', '\x34', '\x2', 
		'\x11D', '\x116', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x121', '\a', '\x37', '\x2', '\x2', '\x120', '\x122', '\x5', 
		'\xA4', 'S', '\x2', '\x121', '\x120', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\x123', '\x124', '\a', '\x38', '\x2', '\x2', '\x124', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x126', '\x5', 'l', '\x37', '\x2', '\x126', 
		'\x128', '\a', '\x37', '\x2', '\x2', '\x127', '\x129', '\x5', '\xA4', 
		'S', '\x2', '\x128', '\x127', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12B', '\a', '\x38', '\x2', '\x2', '\x12B', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12D', '\a', 'N', '\x2', '\x2', '\x12D', '\x12E', 
		'\a', '\x37', '\x2', '\x2', '\x12E', '\x12F', '\x5', '\"', '\x12', '\x2', 
		'\x12F', '\x130', '\a', '\x38', '\x2', '\x2', '\x130', '\x131', '\x5', 
		'\x34', '\x1B', '\x2', '\x131', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x133', '\a', 'N', '\x2', '\x2', '\x133', '\x134', '\a', '\x37', '\x2', 
		'\x2', '\x134', '\x135', '\x5', '\"', '\x12', '\x2', '\x135', '\x136', 
		'\a', '\x38', '\x2', '\x2', '\x136', '\x137', '\x5', '\x34', '\x1B', '\x2', 
		'\x137', '\x138', '\a', 'O', '\x2', '\x2', '\x138', '\x139', '\x5', '\x34', 
		'\x1B', '\x2', '\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x12C', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '-', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13E', '\a', 
		'P', '\x2', '\x2', '\x13D', '\x13F', '\x5', '\x1E', '\x10', '\x2', '\x13E', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', 
		'\a', '\r', '\x2', '\x2', '\x141', '/', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x145', '\x5', '\x32', '\x1A', '\x2', '\x143', '\x145', '\x5', '\x34', 
		'\x1B', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x145', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x147', '\x5', '\x38', '\x1D', '\x2', '\x147', '\x148', 
		'\a', '\r', '\x2', '\x2', '\x148', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x14F', '\x5', '\x44', '#', '\x2', '\x14A', '\x14F', '\x5', 
		'\x36', '\x1C', '\x2', '\x14B', '\x14F', '\x5', '$', '\x13', '\x2', '\x14C', 
		'\x14F', '\x5', ':', '\x1E', '\x2', '\x14D', '\x14F', '\x5', '<', '\x1F', 
		'\x2', '\x14E', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x35', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x151', '\a', '\r', '\x2', '\x2', '\x151', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x153', '\x5', '\x8C', 'G', '\x2', '\x153', '\x154', 
		'\a', '\x17', '\x2', '\x2', '\x154', '\x155', '\x5', '@', '!', '\x2', 
		'\x155', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\x5', 
		'\x8C', 'G', '\x2', '\x157', '\x158', '\a', '\x17', '\x2', '\x2', '\x158', 
		'\x159', '\x5', '@', '!', '\x2', '\x159', '\x15A', '\a', ',', '\x2', '\x2', 
		'\x15A', '\x15B', '\x5', '\x42', '\"', '\x2', '\x15B', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x152', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\x15F', '\x5', ',', '\x17', '\x2', '\x15F', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\x5', '.', '\x18', '\x2', '\x161', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\a', 'Q', '\x2', '\x2', 
		'\x163', '\x164', '\x5', '\x88', '\x45', '\x2', '\x164', '\x166', '\a', 
		'\x37', '\x2', '\x2', '\x165', '\x167', '\x5', '\xA4', 'S', '\x2', '\x166', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x168', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\a', '\x38', '\x2', '\x2', '\x169', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16B', '\x5', '\x88', '\x45', '\x2', '\x16B', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\x1E', '\x10', '\x2', '\x16D', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x170', '\a', '\x39', '\x2', 
		'\x2', '\x16F', '\x171', '\x5', '\x46', '$', '\x2', '\x170', '\x16F', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x172', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\a', 
		':', '\x2', '\x2', '\x173', '\x45', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x176', '\x5', '\x30', '\x19', '\x2', '\x175', '\x174', '\x3', '\x2', 
		'\x2', '\x2', '\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', '\x175', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x178', 'G', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x5', '`', 
		'\x31', '\x2', '\x17A', 'I', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', 
		'\b', '&', '\x1', '\x2', '\x17C', '\x17D', '\x5', '\x62', '\x32', '\x2', 
		'\x17D', '\x189', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\f', 
		'\x5', '\x2', '\x2', '\x17F', '\x180', '\a', '!', '\x2', '\x2', '\x180', 
		'\x188', '\x5', '\x62', '\x32', '\x2', '\x181', '\x182', '\f', '\x4', 
		'\x2', '\x2', '\x182', '\x183', '\a', '\"', '\x2', '\x2', '\x183', '\x188', 
		'\x5', '\x62', '\x32', '\x2', '\x184', '\x185', '\f', '\x3', '\x2', '\x2', 
		'\x185', '\x186', '\a', ' ', '\x2', '\x2', '\x186', '\x188', '\x5', '\x62', 
		'\x32', '\x2', '\x187', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x187', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x187', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x189', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', 'K', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', '\x2', 
		'\x2', '\x2', '\x18C', '\x18D', '\b', '\'', '\x1', '\x2', '\x18D', '\x18E', 
		'\x5', 'J', '&', '\x2', '\x18E', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x190', '\f', '\x4', '\x2', '\x2', '\x190', '\x191', '\a', '\x1E', 
		'\x2', '\x2', '\x191', '\x196', '\x5', 'J', '&', '\x2', '\x192', '\x193', 
		'\f', '\x3', '\x2', '\x2', '\x193', '\x194', '\a', '\x1F', '\x2', '\x2', 
		'\x194', '\x196', '\x5', 'J', '&', '\x2', '\x195', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', '\x195', '\x192', '\x3', '\x2', '\x2', '\x2', '\x196', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x198', '\x3', '\x2', '\x2', '\x2', '\x198', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x199', '\x197', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', 
		'\b', '(', '\x1', '\x2', '\x19B', '\x19C', '\x5', 'L', '\'', '\x2', '\x19C', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\f', '\x4', '\x2', 
		'\x2', '\x19E', '\x19F', '\a', '\'', '\x2', '\x2', '\x19F', '\x1A4', '\x5', 
		'L', '\'', '\x2', '\x1A0', '\x1A1', '\f', '\x3', '\x2', '\x2', '\x1A1', 
		'\x1A2', '\a', '(', '\x2', '\x2', '\x1A2', '\x1A4', '\x5', 'L', '\'', 
		'\x2', '\x1A3', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', 'O', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\b', ')', '\x1', 
		'\x2', '\x1A9', '\x1AA', '\x5', 'N', '(', '\x2', '\x1AA', '\x1B9', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\f', '\x6', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\a', '\x32', '\x2', '\x2', '\x1AD', '\x1B8', '\x5', 'N', '(', 
		'\x2', '\x1AE', '\x1AF', '\f', '\x5', '\x2', '\x2', '\x1AF', '\x1B0', 
		'\a', '\x31', '\x2', '\x2', '\x1B0', '\x1B8', '\x5', 'N', '(', '\x2', 
		'\x1B1', '\x1B2', '\f', '\x4', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '\x34', 
		'\x2', '\x2', '\x1B3', '\x1B8', '\x5', 'N', '(', '\x2', '\x1B4', '\x1B5', 
		'\f', '\x3', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x33', '\x2', '\x2', 
		'\x1B6', '\x1B8', '\x5', 'N', '(', '\x2', '\x1B7', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B4', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\b', '*', '\x1', '\x2', '\x1BD', '\x1BE', '\x5', 
		'P', ')', '\x2', '\x1BE', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1C0', '\f', '\x4', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x35', '\x2', 
		'\x2', '\x1C1', '\x1C6', '\x5', 'P', ')', '\x2', '\x1C2', '\x1C3', '\f', 
		'\x3', '\x2', '\x2', '\x1C3', '\x1C4', '\a', '\x36', '\x2', '\x2', '\x1C4', 
		'\x1C6', '\x5', 'P', ')', '\x2', '\x1C5', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C5', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1C8', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', 
		'\b', '+', '\x1', '\x2', '\x1CB', '\x1CC', '\x5', 'R', '*', '\x2', '\x1CC', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', '\f', '\x3', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\a', '&', '\x2', '\x2', '\x1CF', '\x1D1', '\x5', 
		'R', '*', '\x2', '\x1D0', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1D1', 
		'\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D5', 
		'\x1D6', '\b', ',', '\x1', '\x2', '\x1D6', '\x1D7', '\x5', 'T', '+', '\x2', 
		'\x1D7', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x1D9', '\f', 
		'\x3', '\x2', '\x2', '\x1D9', '\x1DA', '\a', '%', '\x2', '\x2', '\x1DA', 
		'\x1DC', '\x5', 'T', '+', '\x2', '\x1DB', '\x1D8', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', 'W', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DD', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x1E1', '\b', '-', '\x1', '\x2', '\x1E1', '\x1E2', 
		'\x5', 'V', ',', '\x2', '\x1E2', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\f', '\x3', '\x2', '\x2', '\x1E4', '\x1E5', '\a', '$', 
		'\x2', '\x2', '\x1E5', '\x1E7', '\x5', 'V', ',', '\x2', '\x1E6', '\x1E3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\b', '.', '\x1', 
		'\x2', '\x1EC', '\x1ED', '\x5', 'X', '-', '\x2', '\x1ED', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\f', '\x3', '\x2', '\x2', '\x1EF', 
		'\x1F0', '\a', ')', '\x2', '\x2', '\x1F0', '\x1F2', '\x5', 'X', '-', '\x2', 
		'\x1F1', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F3', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', 
		'\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F4', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', 
		'\b', '/', '\x1', '\x2', '\x1F7', '\x1F8', '\x5', 'Z', '.', '\x2', '\x1F8', 
		'\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\f', '\x3', '\x2', 
		'\x2', '\x1FA', '\x1FB', '\a', '*', '\x2', '\x2', '\x1FB', '\x1FD', '\x5', 
		'Z', '.', '\x2', '\x1FC', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FF', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x201', 
		'\x202', '\x5', '\\', '/', '\x2', '\x202', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x203', '\x20B', '\x5', '^', '\x30', '\x2', '\x204', '\x205', '\x5', 
		'^', '\x30', '\x2', '\x205', '\x206', '\a', '\x19', '\x2', '\x2', '\x206', 
		'\x207', '\x5', '\x1E', '\x10', '\x2', '\x207', '\x208', '\a', '\x17', 
		'\x2', '\x2', '\x208', '\x209', '\x5', '\x1E', '\x10', '\x2', '\x209', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x204', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x218', '\x5', 'l', '\x37', '\x2', 
		'\x20D', '\x20E', '\a', '\x1E', '\x2', '\x2', '\x20E', '\x218', '\x5', 
		'\x62', '\x32', '\x2', '\x20F', '\x210', '\a', '\x1F', '\x2', '\x2', '\x210', 
		'\x218', '\x5', '\x62', '\x32', '\x2', '\x211', '\x212', '\a', '+', '\x2', 
		'\x2', '\x212', '\x218', '\x5', '\x62', '\x32', '\x2', '\x213', '\x214', 
		'\a', '#', '\x2', '\x2', '\x214', '\x218', '\x5', '\x62', '\x32', '\x2', 
		'\x215', '\x218', '\x5', '\x64', '\x33', '\x2', '\x216', '\x218', '\x5', 
		'\x66', '\x34', '\x2', '\x217', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x217', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x217', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\x217', '\x211', '\x3', '\x2', '\x2', '\x2', '\x217', '\x213', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '\x21A', '\a', 'S', '\x2', '\x2', '\x21A', 
		'\x21B', '\x5', '\x62', '\x32', '\x2', '\x21B', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x21C', '\x21D', '\a', 'T', '\x2', '\x2', '\x21D', '\x21E', 
		'\x5', '\x62', '\x32', '\x2', '\x21E', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x21F', '\x220', '\x5', 'l', '\x37', '\x2', '\x220', '\x221', '\a', 'S', 
		'\x2', '\x2', '\x221', 'i', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', 
		'\x5', 'l', '\x37', '\x2', '\x223', '\x224', '\a', 'T', '\x2', '\x2', 
		'\x224', 'k', '\x3', '\x2', '\x2', '\x2', '\x225', '\x229', '\x5', 'n', 
		'\x38', '\x2', '\x226', '\x228', '\x5', 'p', '\x39', '\x2', '\x227', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x228', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x22A', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x22B', 
		'\x229', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x232', '\x5', '~', '@', 
		'\x2', '\x22D', '\x232', '\x5', '(', '\x15', '\x2', '\x22E', '\x232', 
		'\a', 'S', '\x2', '\x2', '\x22F', '\x232', '\a', 'T', '\x2', '\x2', '\x230', 
		'\x232', '\x5', '\x8C', 'G', '\x2', '\x231', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x231', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x231', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', '\x2', 
		'\x231', '\x230', '\x3', '\x2', '\x2', '\x2', '\x232', '\x236', '\x3', 
		'\x2', '\x2', '\x2', '\x233', '\x235', '\x5', 'p', '\x39', '\x2', '\x234', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x235', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x236', '\x234', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', 
		'\x3', '\x2', '\x2', '\x2', '\x237', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x238', '\x236', '\x3', '\x2', '\x2', '\x2', '\x239', '\x231', '\x3', 
		'\x2', '\x2', '\x2', '\x23A', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23B', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', 'm', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23B', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x245', '\x5', '\x1A', '\xE', '\x2', '\x23F', 
		'\x245', '\x5', '\x80', '\x41', '\x2', '\x240', '\x245', '\x5', '|', '?', 
		'\x2', '\x241', '\x245', '\x5', '~', '@', '\x2', '\x242', '\x245', '\x5', 
		'\xA2', 'R', '\x2', '\x243', '\x245', '\x5', '>', ' ', '\x2', '\x244', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x244', '\x23F', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x240', '\x3', '\x2', '\x2', '\x2', '\x244', '\x241', 
		'\x3', '\x2', '\x2', '\x2', '\x244', '\x242', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x243', '\x3', '\x2', '\x2', '\x2', '\x245', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x246', '\x247', '\a', ';', '\x2', '\x2', '\x247', '\x248', 
		'\x5', '\xA4', 'S', '\x2', '\x248', '\x249', '\a', '<', '\x2', '\x2', 
		'\x249', 'q', '\x3', '\x2', '\x2', '\x2', '\x24A', '\x24B', '\a', 'Q', 
		'\x2', '\x2', '\x24B', '\x24C', '\x5', 'x', '=', '\x2', '\x24C', '\x24D', 
		'\a', ';', '\x2', '\x2', '\x24D', '\x24E', '\x5', 'z', '>', '\x2', '\x24E', 
		'\x252', '\a', '<', '\x2', '\x2', '\x24F', '\x251', '\x5', 'v', '<', '\x2', 
		'\x250', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x251', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x252', '\x250', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\x253', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x254', '\x252', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', 
		'\a', 'Q', '\x2', '\x2', '\x256', '\x258', '\x5', 't', ';', '\x2', '\x257', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x257', '\x255', '\x3', '\x2', '\x2', 
		'\x2', '\x258', 's', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25B', '\x5', 
		'x', '=', '\x2', '\x25A', '\x25C', '\x5', 'v', '<', '\x2', '\x25B', '\x25A', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x25D', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', '\x3', 
		'\x2', '\x2', '\x2', '\x25E', 'u', '\x3', '\x2', '\x2', '\x2', '\x25F', 
		'\x263', '\a', ';', '\x2', '\x2', '\x260', '\x262', '\a', '\x18', '\x2', 
		'\x2', '\x261', '\x260', '\x3', '\x2', '\x2', '\x2', '\x262', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x264', '\x3', '\x2', '\x2', '\x2', '\x264', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x263', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\x267', '\a', '<', '\x2', '\x2', '\x267', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x268', '\x26B', '\x5', '\x8E', 'H', '\x2', '\x269', '\x26B', '\x5', 
		'\x8A', '\x46', '\x2', '\x26A', '\x268', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x26B', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x26C', '\x26D', '\b', '>', '\x1', '\x2', '\x26D', '\x26E', '\x5', 
		'\x1E', '\x10', '\x2', '\x26E', '\x274', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'\x270', '\f', '\x3', '\x2', '\x2', '\x270', '\x271', '\a', '\x18', '\x2', 
		'\x2', '\x271', '\x273', '\x5', '\x1E', '\x10', '\x2', '\x272', '\x26F', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x276', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x272', '\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\x3', 
		'\x2', '\x2', '\x2', '\x275', '{', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\x274', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', '\a', '\x37', '\x2', 
		'\x2', '\x278', '\x279', '\x5', '\x1E', '\x10', '\x2', '\x279', '\x27A', 
		'\a', '\x38', '\x2', '\x2', '\x27A', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x27C', '\a', '\x1B', '\x2', '\x2', '\x27C', '\x27E', '\x5', 
		'\x8C', 'G', '\x2', '\x27D', '\x27F', '\x5', '\x82', '\x42', '\x2', '\x27E', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x280', '\x282', 
		'\x5', '\x8C', 'G', '\x2', '\x281', '\x283', '\x5', '\x82', '\x42', '\x2', 
		'\x282', '\x281', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x81', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x285', '\a', '\x1C', '\x2', '\x2', '\x285', '\x286', '\x5', '\x84', 
		'\x43', '\x2', '\x286', '\x287', '\a', '\x1D', '\x2', '\x2', '\x287', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x288', '\x28D', '\x5', '\x86', '\x44', 
		'\x2', '\x289', '\x28A', '\a', '\x18', '\x2', '\x2', '\x28A', '\x28C', 
		'\x5', '\x86', '\x44', '\x2', '\x28B', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28B', '\x3', 
		'\x2', '\x2', '\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28E', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x28D', '\x3', '\x2', '\x2', 
		'\x2', '\x290', '\x291', '\x5', '\x88', '\x45', '\x2', '\x291', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x292', '\x296', '\x3', '\x2', '\x2', '\x2', 
		'\x293', '\x296', '\x5', '\x8E', 'H', '\x2', '\x294', '\x296', '\x5', 
		'\x8A', '\x46', '\x2', '\x295', '\x292', '\x3', '\x2', '\x2', '\x2', '\x295', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x295', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x296', '\x89', '\x3', '\x2', '\x2', '\x2', '\x297', '\x298', 
		'\x5', '\x8C', 'G', '\x2', '\x298', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x299', '\x29A', '\a', '[', '\x2', '\x2', '\x29A', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x29B', '\x29C', '\x5', '\x90', 'I', '\x2', '\x29C', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x5', '\x92', 'J', '\x2', 
		'\x29E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A2', '\x5', 
		'\x9E', 'P', '\x2', '\x2A0', '\x2A2', '\x5', '\x94', 'K', '\x2', '\x2A1', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A0', '\x3', '\x2', '\x2', 
		'\x2', '\x2A2', '\x93', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A6', 
		'\x5', '\x96', 'L', '\x2', '\x2A4', '\x2A6', '\a', '=', '\x2', '\x2', 
		'\x2A5', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A4', '\x3', 
		'\x2', '\x2', '\x2', '\x2A6', '\x95', '\x3', '\x2', '\x2', '\x2', '\x2A7', 
		'\x2AA', '\x5', '\x9A', 'N', '\x2', '\x2A8', '\x2AA', '\x5', '\x98', 'M', 
		'\x2', '\x2A9', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x2AB', '\x2AC', '\t', '\x3', '\x2', '\x2', '\x2AC', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x2AD', '\x2AE', '\t', '\x4', '\x2', '\x2', '\x2AE', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\x5', '\xA0', 'Q', '\x2', 
		'\x2B0', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\x5', 
		'\xA0', 'Q', '\x2', '\x2B2', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x2B3', 
		'\x2B4', '\b', 'Q', '\x1', '\x2', '\x2B4', '\x2B6', '\x5', '\x8C', 'G', 
		'\x2', '\x2B5', '\x2B7', '\x5', '\x82', '\x42', '\x2', '\x2B6', '\x2B5', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2B7', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2B9', '\f', 
		'\x3', '\x2', '\x2', '\x2B9', '\x2BA', '\a', '\x1B', '\x2', '\x2', '\x2BA', 
		'\x2BC', '\x5', '\x8C', 'G', '\x2', '\x2BB', '\x2BD', '\x5', '\x82', '\x42', 
		'\x2', '\x2BC', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BF', '\x3', '\x2', '\x2', '\x2', 
		'\x2BE', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C2', '\x3', 
		'\x2', '\x2', '\x2', '\x2C0', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C0', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x2C2', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', 
		'\a', 'R', '\x2', '\x2', '\x2C4', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x2C5', '\x2CA', '\x5', '\xA6', 'T', '\x2', '\x2C6', '\x2C7', '\a', '\x18', 
		'\x2', '\x2', '\x2C7', '\x2C9', '\x5', '\xA6', 'T', '\x2', '\x2C8', '\x2C6', 
		'\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CC', '\x3', '\x2', '\x2', '\x2', 
		'\x2CA', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CB', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x2CC', 
		'\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2CF', '\x5', '\xA8', 
		'U', '\x2', '\x2CE', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', 
		'\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\x2D1', '\x5', '\xAA', 'V', '\x2', '\x2D1', '\xA7', '\x3', '\x2', 
		'\x2', '\x2', '\x2D2', '\x2D3', '\x5', '\x8C', 'G', '\x2', '\x2D3', '\x2D4', 
		'\a', '\x17', '\x2', '\x2', '\x2D4', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\x2D5', '\x2D6', '\x5', '\x1E', '\x10', '\x2', '\x2D6', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\xAE', '\xB0', '\xB5', '\xB7', '\xBF', '\xC3', 
		'\xCA', '\xCE', '\xD2', '\xD8', '\xE3', '\xE5', '\xEA', '\xF9', '\xFB', 
		'\x105', '\x10B', '\x11D', '\x121', '\x128', '\x13A', '\x13E', '\x144', 
		'\x14E', '\x15C', '\x166', '\x170', '\x177', '\x187', '\x189', '\x195', 
		'\x197', '\x1A3', '\x1A5', '\x1B7', '\x1B9', '\x1C5', '\x1C7', '\x1D2', 
		'\x1DD', '\x1E8', '\x1F3', '\x1FE', '\x20A', '\x217', '\x229', '\x231', 
		'\x236', '\x23B', '\x244', '\x252', '\x257', '\x25D', '\x263', '\x26A', 
		'\x274', '\x27E', '\x282', '\x28D', '\x295', '\x2A1', '\x2A5', '\x2A9', 
		'\x2B6', '\x2BC', '\x2C0', '\x2CA', '\x2CE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
